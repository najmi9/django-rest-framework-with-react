{"ast":null,"code":"import e from \"react\";\n\nfunction t(e, t, n) {\n  return t in e ? Object.defineProperty(e, t, {\n    value: n,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[t] = n, e;\n}\n\nfunction n(e, t) {\n  var n = Object.keys(e);\n\n  if (Object.getOwnPropertySymbols) {\n    var r = Object.getOwnPropertySymbols(e);\n    t && (r = r.filter(function (t) {\n      return Object.getOwnPropertyDescriptor(e, t).enumerable;\n    })), n.push.apply(n, r);\n  }\n\n  return n;\n}\n\nfunction r(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var a = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? n(Object(a), !0).forEach(function (n) {\n      t(e, n, a[n]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(a)) : n(Object(a)).forEach(function (t) {\n      Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(a, t));\n    });\n  }\n\n  return e;\n}\n\nvar a = /[\\'\\\"]/,\n    c = {\n  accesskey: \"accessKey\",\n  allowfullscreen: \"allowFullScreen\",\n  allowtransparency: \"allowTransparency\",\n  autocomplete: \"autoComplete\",\n  autofocus: \"autoFocus\",\n  autoplay: \"autoPlay\",\n  cellpadding: \"cellPadding\",\n  cellspacing: \"cellSpacing\",\n  charset: \"charSet\",\n  class: \"className\",\n  classid: \"classId\",\n  colspan: \"colSpan\",\n  contenteditable: \"contentEditable\",\n  contextmenu: \"contextMenu\",\n  crossorigin: \"crossOrigin\",\n  enctype: \"encType\",\n  for: \"htmlFor\",\n  formaction: \"formAction\",\n  formenctype: \"formEncType\",\n  formmethod: \"formMethod\",\n  formnovalidate: \"formNoValidate\",\n  formtarget: \"formTarget\",\n  frameborder: \"frameBorder\",\n  hreflang: \"hrefLang\",\n  inputmode: \"inputMode\",\n  keyparams: \"keyParams\",\n  keytype: \"keyType\",\n  marginheight: \"marginHeight\",\n  marginwidth: \"marginWidth\",\n  maxlength: \"maxLength\",\n  mediagroup: \"mediaGroup\",\n  minlength: \"minLength\",\n  novalidate: \"noValidate\",\n  radiogroup: \"radioGroup\",\n  readonly: \"readOnly\",\n  rowspan: \"rowSpan\",\n  spellcheck: \"spellCheck\",\n  srcdoc: \"srcDoc\",\n  srclang: \"srcLang\",\n  srcset: \"srcSet\",\n  tabindex: \"tabIndex\",\n  usemap: \"useMap\"\n},\n    o = {\n  amp: \"&\",\n  apos: \"'\",\n  gt: \">\",\n  lt: \"<\",\n  nbsp: \" \",\n  quot: \"“\"\n},\n    i = [\"style\", \"script\"],\n    l = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n    u = /mailto:/i,\n    s = /\\n{2,}$/,\n    f = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n    p = /^ *> ?/gm,\n    d = /^ {2,}\\n/,\n    g = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/,\n    m = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/,\n    y = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n    h = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n    k = /^(?:\\n *)*\\n/,\n    v = /\\r\\n?/g,\n    b = /^\\[\\^([^\\]]+)](:.*)\\n/,\n    x = /^\\[\\^([^\\]]+)]/,\n    O = /\\f/g,\n    H = /^\\s*?\\[(x|\\s)\\]/,\n    S = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/,\n    w = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n    I = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n    A = /&([a-z]+);/g,\n    M = /^<!--.*?-->/,\n    E = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n    j = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n    C = /^\\{.*\\}$/,\n    G = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n    L = /^<([^ >]+@[^ >]+)>/,\n    $ = /^<([^ >]+:\\/[^ >]+)>/,\n    T = / *\\n+$/,\n    P = /(?:^|\\n)( *)$/,\n    z = /-([a-z])?/gi,\n    X = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n    D = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/,\n    R = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/,\n    _ = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    B = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n    N = /(\\[|\\])/g,\n    U = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n    W = /\\t/g,\n    Z = /^ *\\| */,\n    F = /(^ *\\||\\| *$)/g,\n    q = / *$/,\n    V = /^ *:-+: *$/,\n    K = /^ *:-+ *$/,\n    Q = /^ *-+: *$/,\n    J = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n    Y = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/,\n    ee = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n    te = /^\\\\([^0-9A-Za-z\\s])/,\n    ne = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n    re = /(^\\n+|\\n+$|\\s+$)/g,\n    ae = /^([ \\t]*)/,\n    ce = /\\\\([^0-9A-Z\\s])/gi,\n    oe = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) +\"),\n    ie = new RegExp(\"( *)((?:[*+-]|\\\\d+\\\\.)) +[^\\\\n]*(?:\\\\n(?!\\\\1(?:[*+-]|\\\\d+\\\\.) )[^\\\\n]*)*(\\\\n|$)\", \"gm\"),\n    le = new RegExp(\"^( *)((?:[*+-]|\\\\d+\\\\.)) [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1(?:[*+-]|\\\\d+\\\\.) (?!(?:[*+-]|\\\\d+\\\\.) ))\\\\n*|\\\\s*\\\\n*$)\"),\n    ue = \"(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*\",\n    se = new RegExp(\"^\\\\[(\" + ue + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n    fe = new RegExp(\"^!\\\\[(\" + ue + \")\\\\]\\\\(\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n    pe = [f, y, m, S, w, I, M, j, ie, le, X, D];\n\nfunction de(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\n\nfunction ge(e) {\n  return Q.test(e) ? \"right\" : V.test(e) ? \"center\" : K.test(e) ? \"left\" : null;\n}\n\nfunction me(e, t, n) {\n  var r = n.inTable;\n  n.inTable = !0;\n  var a = t(e.trim(), n);\n  n.inTable = r;\n  var c = [[]];\n  return a.forEach(function (e, t) {\n    \"tableSeparator\" === e.type ? 0 !== t && t !== a.length - 1 && c.push([]) : (\"text\" !== e.type || null != a[t + 1] && \"tableSeparator\" !== a[t + 1].type || (e.content = e.content.replace(q, \"\")), c[c.length - 1].push(e));\n  }), c;\n}\n\nfunction ye(e, t, n) {\n  n.inline = !0;\n\n  var r = me(e[1], t, n),\n      a = e[2].replace(F, \"\").split(\"|\").map(ge),\n      c = function (e, t, n) {\n    return e.trim().split(\"\\n\").map(function (e) {\n      return me(e, t, n);\n    });\n  }(e[3], t, n);\n\n  return n.inline = !1, {\n    align: a,\n    cells: c,\n    header: r,\n    type: \"table\"\n  };\n}\n\nfunction he(e, t) {\n  return null == e.align[t] ? {} : {\n    textAlign: e.align[t]\n  };\n}\n\nfunction ke(e) {\n  return function (t, n) {\n    return n.inline ? e.exec(t) : null;\n  };\n}\n\nfunction ve(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? e.exec(t) : null;\n  };\n}\n\nfunction be(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? null : e.exec(t);\n  };\n}\n\nfunction xe(e) {\n  return function (t) {\n    return e.exec(t);\n  };\n}\n\nfunction Oe(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data):/i)) return null;\n  } catch (e) {\n    return null;\n  }\n\n  return e;\n}\n\nfunction He(e) {\n  return e.replace(ce, \"$1\");\n}\n\nfunction Se(e, t, n) {\n  var r = n.inline || !1,\n      a = n.simple || !1;\n  n.inline = !0, n.simple = !0;\n  var c = e(t, n);\n  return n.inline = r, n.simple = a, c;\n}\n\nfunction we(e, t, n) {\n  var r = n.inline || !1,\n      a = n.simple || !1;\n  n.inline = !1, n.simple = !0;\n  var c = e(t, n);\n  return n.inline = r, n.simple = a, c;\n}\n\nfunction Ie(e, t, n) {\n  return n.inline = !1, e(t + \"\\n\\n\", n);\n}\n\nvar Ae,\n    Me = function (e, t, n) {\n  return {\n    content: Se(t, e[1], n)\n  };\n};\n\nfunction Ee() {\n  return {};\n}\n\nfunction je() {\n  return null;\n}\n\nfunction Ce() {\n  return [].slice.call(arguments).filter(Boolean).join(\" \");\n}\n\nfunction Ge(e, t, n) {\n  for (var r = e, a = t.split(\".\"); a.length && void 0 !== (r = r[a[0]]);) a.shift();\n\n  return r || n;\n}\n\nfunction Le(e, t) {\n  var n = Ge(t, e);\n  return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : Ge(t, e + \".component\", e) : e;\n}\n\nfunction $e(t, n) {\n  void 0 === n && (n = {}), n.overrides = n.overrides || {}, n.slugify = n.slugify || de, n.namedCodesToUnicode = n.namedCodesToUnicode ? r(r({}, o), n.namedCodesToUnicode) : o;\n  var F = n.createElement || e.createElement;\n\n  function q(e, t) {\n    var a = Ge(n.overrides, e + \".props\", {});\n    return F.apply(void 0, [Le(e, n.overrides), r(r(r({}, t), a), {}, {\n      className: Ce(null == t ? void 0 : t.className, a.className) || void 0\n    })].concat([].slice.call(arguments, 2)));\n  }\n\n  function V(e) {\n    var t = !1;\n    n.forceInline ? t = !0 : n.forceBlock || (t = !1 === U.test(e));\n    var r,\n        a = $e(me(t ? e : e.replace(re, \"\") + \"\\n\\n\", {\n      inline: t\n    }));\n    return a.length > 1 ? r = q(t ? \"span\" : \"div\", {\n      key: \"outer\"\n    }, a) : 1 === a.length ? \"string\" == typeof (r = a[0]) && (r = q(\"span\", {\n      key: \"outer\"\n    }, r)) : r = q(\"span\", {\n      key: \"outer\"\n    }), r;\n  }\n\n  function K(t) {\n    var n = t.match(l);\n    return n ? n.reduce(function (t, n, r) {\n      var o = n.indexOf(\"=\");\n\n      if (-1 !== o) {\n        var i = function (e) {\n          return -1 !== e.indexOf(\"-\") && null === e.match(E) && (e = e.replace(z, function (e, t) {\n            return t.toUpperCase();\n          })), e;\n        }(n.slice(0, o)).trim(),\n            l = function (e) {\n          return e ? (a.test(e.charAt(0)) && (e = e.substr(1)), a.test(e.charAt(e.length - 1)) && (e = e.substr(0, e.length - 1)), e) : \"\";\n        }(n.slice(o + 1).trim()),\n            u = c[i] || i,\n            s = t[u] = function (e, t) {\n          return \"style\" === e ? t.split(/;\\s?/).reduce(function (e, t) {\n            var n = t.slice(0, t.indexOf(\":\"));\n            return e[n.replace(/(-[a-z])/g, function (e) {\n              return e[1].toUpperCase();\n            })] = t.slice(n.length + 1).trim(), e;\n          }, {}) : \"href\" === e ? Oe(t) : (t.match(C) && (t = t.slice(1, t.length - 1)), \"true\" === t || \"false\" !== t && t);\n        }(i, l);\n\n        \"string\" == typeof s && (I.test(s) || j.test(s)) && (t[u] = e.cloneElement(V(s.trim()), {\n          key: r\n        }));\n      } else \"style\" !== n && (t[c[n] || n] = !0);\n\n      return t;\n    }, {}) : void 0;\n  }\n\n  var Q = [],\n      ce = {},\n      ue = {\n    blockQuote: {\n      match: be(f),\n      order: Ae.HIGH,\n      parse: function (e, t, n) {\n        return {\n          content: t(e[0].replace(p, \"\"), n)\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"blockquote\", {\n          key: n.key\n        }, t(e.content, n));\n      }\n    },\n    breakLine: {\n      match: xe(d),\n      order: Ae.HIGH,\n      parse: Ee,\n      react: function (e, t, n) {\n        return q(\"br\", {\n          key: n.key\n        });\n      }\n    },\n    breakThematic: {\n      match: be(g),\n      order: Ae.HIGH,\n      parse: Ee,\n      react: function (e, t, n) {\n        return q(\"hr\", {\n          key: n.key\n        });\n      }\n    },\n    codeBlock: {\n      match: be(y),\n      order: Ae.MAX,\n      parse: function (e) {\n        return {\n          content: e[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n          lang: void 0\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"pre\", {\n          key: n.key\n        }, q(\"code\", {\n          className: e.lang ? \"lang-\" + e.lang : \"\"\n        }, e.content));\n      }\n    },\n    codeFenced: {\n      match: be(m),\n      order: Ae.MAX,\n      parse: function (e) {\n        return {\n          content: e[3],\n          lang: e[2] || void 0,\n          type: \"codeBlock\"\n        };\n      }\n    },\n    codeInline: {\n      match: ve(h),\n      order: Ae.LOW,\n      parse: function (e) {\n        return {\n          content: e[2]\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"code\", {\n          key: n.key\n        }, e.content);\n      }\n    },\n    footnote: {\n      match: be(b),\n      order: Ae.MAX,\n      parse: function (e) {\n        return Q.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {};\n      },\n      react: je\n    },\n    footnoteReference: {\n      match: ke(x),\n      order: Ae.HIGH,\n      parse: function (e) {\n        return {\n          content: e[1],\n          target: \"#\" + n.slugify(e[1])\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"a\", {\n          key: n.key,\n          href: Oe(e.target)\n        }, q(\"sup\", {\n          key: n.key\n        }, e.content));\n      }\n    },\n    gfmTask: {\n      match: ke(H),\n      order: Ae.HIGH,\n      parse: function (e) {\n        return {\n          completed: \"x\" === e[1].toLowerCase()\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"input\", {\n          checked: e.completed,\n          key: n.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        });\n      }\n    },\n    heading: {\n      match: be(S),\n      order: Ae.HIGH,\n      parse: function (e, t, r) {\n        return {\n          content: Se(t, e[2], r),\n          id: n.slugify(e[2]),\n          level: e[1].length\n        };\n      },\n      react: function (e, t, n) {\n        return e.tag = \"h\" + e.level, q(e.tag, {\n          id: e.id,\n          key: n.key\n        }, t(e.content, n));\n      }\n    },\n    headingSetext: {\n      match: be(w),\n      order: Ae.MAX,\n      parse: function (e, t, n) {\n        return {\n          content: Se(t, e[1], n),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: \"heading\"\n        };\n      }\n    },\n    htmlComment: {\n      match: xe(M),\n      order: Ae.HIGH,\n      parse: function () {\n        return {};\n      },\n      react: je\n    },\n    image: {\n      match: ve(fe),\n      order: Ae.HIGH,\n      parse: function (e) {\n        return {\n          alt: e[1],\n          target: He(e[2]),\n          title: e[3]\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"img\", {\n          key: n.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: Oe(e.target)\n        });\n      }\n    },\n    link: {\n      match: ke(se),\n      order: Ae.LOW,\n      parse: function (e, t, n) {\n        return {\n          content: we(t, e[1], n),\n          target: He(e[2]),\n          title: e[3]\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"a\", {\n          key: n.key,\n          href: Oe(e.target),\n          title: e.title\n        }, t(e.content, n));\n      }\n    },\n    linkAngleBraceStyleDetector: {\n      match: ke($),\n      order: Ae.MAX,\n      parse: function (e) {\n        return {\n          content: [{\n            content: e[1],\n            type: \"text\"\n          }],\n          target: e[1],\n          type: \"link\"\n        };\n      }\n    },\n    linkBareUrlDetector: {\n      match: ke(G),\n      order: Ae.MAX,\n      parse: function (e) {\n        return {\n          content: [{\n            content: e[1],\n            type: \"text\"\n          }],\n          target: e[1],\n          title: void 0,\n          type: \"link\"\n        };\n      }\n    },\n    linkMailtoDetector: {\n      match: ke(L),\n      order: Ae.MAX,\n      parse: function (e) {\n        var t = e[1],\n            n = e[1];\n        return u.test(n) || (n = \"mailto:\" + n), {\n          content: [{\n            content: t.replace(\"mailto:\", \"\"),\n            type: \"text\"\n          }],\n          target: n,\n          type: \"link\"\n        };\n      }\n    },\n    list: {\n      match: function (e, t, n) {\n        var r = P.exec(n);\n        return !r || !t._list && t.inline ? null : le.exec(e = r[1] + e);\n      },\n      order: Ae.HIGH,\n      parse: function (e, t, n) {\n        var r = e[2],\n            a = r.length > 1,\n            c = a ? +r : void 0,\n            o = e[0].replace(s, \"\\n\").match(ie),\n            i = !1;\n        return {\n          items: o.map(function (e, r) {\n            var a = oe.exec(e)[0].length,\n                c = new RegExp(\"^ {1,\" + a + \"}\", \"gm\"),\n                l = e.replace(c, \"\").replace(oe, \"\"),\n                u = r === o.length - 1,\n                s = -1 !== l.indexOf(\"\\n\\n\") || u && i;\n            i = s;\n            var f,\n                p = n.inline,\n                d = n._list;\n            n._list = !0, s ? (n.inline = !1, f = l.replace(T, \"\\n\\n\")) : (n.inline = !0, f = l.replace(T, \"\"));\n            var g = t(f, n);\n            return n.inline = p, n._list = d, g;\n          }),\n          ordered: a,\n          start: c\n        };\n      },\n      react: function (e, t, n) {\n        return q(e.ordered ? \"ol\" : \"ul\", {\n          key: n.key,\n          start: e.start\n        }, e.items.map(function (e, r) {\n          return q(\"li\", {\n            key: r\n          }, t(e, n));\n        }));\n      }\n    },\n    newlineCoalescer: {\n      match: be(k),\n      order: Ae.LOW,\n      parse: Ee,\n      react: function () {\n        return \"\\n\";\n      }\n    },\n    paragraph: {\n      match: be(D),\n      order: Ae.LOW,\n      parse: Me,\n      react: function (e, t, n) {\n        return q(\"p\", {\n          key: n.key\n        }, t(e.content, n));\n      }\n    },\n    ref: {\n      match: ke(R),\n      order: Ae.MAX,\n      parse: function (e) {\n        return ce[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {};\n      },\n      react: je\n    },\n    refImage: {\n      match: ve(_),\n      order: Ae.MAX,\n      parse: function (e) {\n        return {\n          alt: e[1] || void 0,\n          ref: e[2]\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"img\", {\n          key: n.key,\n          alt: e.alt,\n          src: Oe(ce[e.ref].target),\n          title: ce[e.ref].title\n        });\n      }\n    },\n    refLink: {\n      match: ke(B),\n      order: Ae.MAX,\n      parse: function (e, t, n) {\n        return {\n          content: t(e[1], n),\n          fallbackContent: t(e[0].replace(N, \"\\\\$1\"), n),\n          ref: e[2]\n        };\n      },\n      react: function (e, t, n) {\n        return ce[e.ref] ? q(\"a\", {\n          key: n.key,\n          href: Oe(ce[e.ref].target),\n          title: ce[e.ref].title\n        }, t(e.content, n)) : q(\"span\", {\n          key: n.key\n        }, t(e.fallbackContent, n));\n      }\n    },\n    table: {\n      match: be(X),\n      order: Ae.HIGH,\n      parse: ye,\n      react: function (e, t, n) {\n        return q(\"table\", {\n          key: n.key\n        }, q(\"thead\", null, q(\"tr\", null, e.header.map(function (r, a) {\n          return q(\"th\", {\n            key: a,\n            style: he(e, a)\n          }, t(r, n));\n        }))), q(\"tbody\", null, e.cells.map(function (r, a) {\n          return q(\"tr\", {\n            key: a\n          }, r.map(function (r, a) {\n            return q(\"td\", {\n              key: a,\n              style: he(e, a)\n            }, t(r, n));\n          }));\n        })));\n      }\n    },\n    tableSeparator: {\n      match: function (e, t) {\n        return t.inTable ? Z.exec(e) : null;\n      },\n      order: Ae.HIGH,\n      parse: function () {\n        return {\n          type: \"tableSeparator\"\n        };\n      },\n      react: function () {\n        return \" | \";\n      }\n    },\n    text: {\n      match: xe(ne),\n      order: Ae.MIN,\n      parse: function (e) {\n        return {\n          content: e[0].replace(A, function (e, t) {\n            return n.namedCodesToUnicode[t] ? n.namedCodesToUnicode[t] : e;\n          })\n        };\n      },\n      react: function (e) {\n        return e.content;\n      }\n    },\n    textBolded: {\n      match: ve(J),\n      order: Ae.MED,\n      parse: function (e, t, n) {\n        return {\n          content: t(e[2], n)\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"strong\", {\n          key: n.key\n        }, t(e.content, n));\n      }\n    },\n    textEmphasized: {\n      match: ve(Y),\n      order: Ae.LOW,\n      parse: function (e, t, n) {\n        return {\n          content: t(e[2], n)\n        };\n      },\n      react: function (e, t, n) {\n        return q(\"em\", {\n          key: n.key\n        }, t(e.content, n));\n      }\n    },\n    textEscaped: {\n      match: ve(te),\n      order: Ae.HIGH,\n      parse: function (e) {\n        return {\n          content: e[1],\n          type: \"text\"\n        };\n      }\n    },\n    textStrikethroughed: {\n      match: ve(ee),\n      order: Ae.LOW,\n      parse: Me,\n      react: function (e, t, n) {\n        return q(\"del\", {\n          key: n.key\n        }, t(e.content, n));\n      }\n    }\n  };\n  !0 !== n.disableParsingRawHTML && (ue.htmlBlock = {\n    match: xe(I),\n    order: Ae.HIGH,\n    parse: function (e, t, n) {\n      var r,\n          a = e[3].match(ae),\n          c = new RegExp(\"^\" + a[1], \"gm\"),\n          o = e[3].replace(c, \"\"),\n          l = (r = o, pe.some(function (e) {\n        return e.test(r);\n      }) ? Ie : Se),\n          u = e[1].toLowerCase(),\n          s = -1 !== i.indexOf(u);\n      return {\n        attrs: K(e[2]),\n        content: s ? e[3] : l(t, o, n),\n        noInnerParse: s,\n        tag: s ? u : e[1]\n      };\n    },\n    react: function (e, t, n) {\n      return q(e.tag, Object.assign({\n        key: n.key\n      }, e.attrs), e.noInnerParse ? e.content : t(e.content, n));\n    }\n  }, ue.htmlSelfClosing = {\n    match: xe(j),\n    order: Ae.HIGH,\n    parse: function (e) {\n      return {\n        attrs: K(e[2] || \"\"),\n        tag: e[1]\n      };\n    },\n    react: function (e, t, n) {\n      return q(e.tag, Object.assign({}, e.attrs, {\n        key: n.key\n      }));\n    }\n  });\n\n  var ge,\n      me = function (e) {\n    var t = Object.keys(e);\n\n    function n(r, a) {\n      for (var c = [], o = \"\"; r;) for (var i = 0; i < t.length;) {\n        var l = t[i],\n            u = e[l],\n            s = u.match(r, a, o);\n\n        if (s) {\n          var f = s[0];\n          r = r.substring(f.length);\n          var p = u.parse(s, n, a);\n          null == p.type && (p.type = l), c.push(p), o = f;\n          break;\n        }\n\n        i++;\n      }\n\n      return c;\n    }\n\n    return t.sort(function (t, n) {\n      var r = e[t].order,\n          a = e[n].order;\n      return r !== a ? r - a : t < n ? -1 : 1;\n    }), function (e, t) {\n      return n(function (e) {\n        return e.replace(v, \"\\n\").replace(O, \"\").replace(W, \"    \");\n      }(e), t);\n    };\n  }(ue),\n      $e = (ge = function (e) {\n    return function (t, n, r) {\n      return e[t.type].react(t, n, r);\n    };\n  }(ue), function e(t, n) {\n    if (void 0 === n && (n = {}), Array.isArray(t)) {\n      for (var r = n.key, a = [], c = !1, o = 0; o < t.length; o++) {\n        n.key = o;\n        var i = e(t[o], n),\n            l = \"string\" == typeof i;\n        l && c ? a[a.length - 1] += i : a.push(i), c = l;\n      }\n\n      return n.key = r, a;\n    }\n\n    return ge(t, e, n);\n  }),\n      Te = V(t.replace(/<!--[\\s\\S]*?(?:-->)/g, \"\"));\n\n  return Q.length && Te.props.children.push(q(\"footer\", {\n    key: \"footer\"\n  }, Q.map(function (e) {\n    return q(\"div\", {\n      id: n.slugify(e.identifier),\n      key: e.identifier\n    }, e.identifier, $e(me(e.footnote, {\n      inline: !0\n    })));\n  }))), Te;\n}\n\n!function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(Ae || (Ae = {}));\nexport default function (t) {\n  var n = t.children,\n      r = t.options,\n      a = function (e, t) {\n    if (null == e) return {};\n    var n,\n        r,\n        a = {},\n        c = Object.keys(e);\n\n    for (r = 0; r < c.length; r++) t.indexOf(n = c[r]) >= 0 || (a[n] = e[n]);\n\n    return a;\n  }(t, [\"children\", \"options\"]);\n\n  return e.cloneElement($e(n, r), a);\n}\nexport { $e as compiler };","map":{"version":3,"sources":["../node_modules/unquote/index.js","../index.tsx"],"names":["reg","str","test","charAt","substr","length","ATTRIBUTE_TO_JSX_PROP_MAP","accesskey","allowfullscreen","allowtransparency","autocomplete","autofocus","autoplay","cellpadding","cellspacing","charset","class","classid","colspan","contenteditable","contextmenu","crossorigin","enctype","for","formaction","formenctype","formmethod","formnovalidate","formtarget","frameborder","hreflang","inputmode","keyparams","keytype","marginheight","marginwidth","maxlength","mediagroup","minlength","novalidate","radiogroup","readonly","rowspan","spellcheck","srcdoc","srclang","srcset","tabindex","usemap","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","GFM_TASK_R","HEADING_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","PARAGRAPH_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_SEPARATOR_R","TABLE_TRIM_PIPES","TABLE_CELL_END_TRIM","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","TEXT_BOLD_R","TEXT_EMPHASIZED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_PREFIX_R","RegExp","LIST_ITEM_R","LIST_ITEM_PREFIX","LIST_R","LINK_INSIDE","LINK_R","IMAGE_R","BLOCK_SYNTAXES","input","some","r","slugify","replace","toLowerCase","parseTableAlignCapture","alignCapture","parseTableRow","source","parse","state","prevInTable","inTable","tableRow","trim","cells","forEach","node","i","type","push","content","split","map","rowText","parseTable","capture","inline","header","align","parseTableCells","getTableStyle","colIndex","textAlign","key","indexOf","match","_","letter","toUpperCase","value","reduce","styles","kvPair","slice","sanitizeUrl","rules","ruleList","Object","keys","sort","typeA","typeB","orderA","order","orderB","nestedParse","result","prevCapture","ruleType","rule","currCaptureString","substring","parsed","normalizeWhitespace","inlineRegex","regex","exec","simpleInlineRegex","simple","blockRegex","anyScopeRegex","outputFunc","nestedReactOutput","ast","Array","isArray","oldKey","lastWasString","nodeOut","isString","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","react","cx","filter","Boolean","join","get","src","path","fb","ptr","frags","undefined","shift","getTag","tag","overrides","override","Priority","compiler","markdown","options","createElementFn","createElement","React","h","props","overrideProps","className","compile","forceInline","forceBlock","arr","emitter","parser","jsx","attrStringToMap","attributes","raw","index","delimiterIdx","normalizeAttributeKey","unquote","mappedKey","normalizedValue","attributeValueToJSXPropValue","cloneElement","footnotes","refs","blockQuote","HIGH","output","breakLine","__","breakThematic","codeBlock","MAX","lang","codeFenced","codeInline","LOW","footnote","identifier","footnoteReference","target","href","gfmTask","completed","checked","readOnly","heading","id","level","headingSetext","htmlComment","image","alt","title","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","address","list","isStartOfLine","_list","bullet","ordered","start","items","lastItemWasAParagraph","item","space","spaceRegex","isLastItem","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","newlineCoalescer","paragraph","ref","refImage","refLink","fallbackContent","table","style","row","c","tableSeparator","text","MIN","full","inner","textBolded","MED","textEmphasized","textEscaped","textStrikethroughed","disableParsingRawHTML","htmlBlock","trimmer","trimmed","parseFunc","tagName","noInnerParse","attrs","htmlSelfClosing","parserFor","ruleOutput","children","def"],"mappings":"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","sourcesContent":["var reg = /[\\'\\\"]/\n\nmodule.exports = function unquote(str) {\n  if (!str) {\n    return ''\n  }\n  if (reg.test(str.charAt(0))) {\n    str = str.substr(1)\n  }\n  if (reg.test(str.charAt(str.length - 1))) {\n    str = str.substr(0, str.length - 1)\n  }\n  return str\n}\n","/* @jsx h */\n/**\n * markdown-to-jsx@6 is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport React from 'react'\n/// <reference path=\"unquote.d.ts\" />\nimport unquote from 'unquote'\n\ntype CreateElement = typeof React.createElement\n\ntype HTMLTags = keyof JSX.IntrinsicElements\n\ntype State = {\n  _list?: boolean\n  inline?: boolean\n  inTable?: boolean\n  key?: React.Key\n  simple?: boolean\n}\n\ntype ParserResult = {\n  [key: string]: any\n  type?: string\n}\n\ntype NestedParser = (input: string, state?: State) => ParserResult\n\ntype Parser<ParserOutput> = (\n  capture: RegExpMatchArray,\n  nestedParse: NestedParser,\n  state?: State\n) => ParserOutput\n\ntype RuleOutput = (ast: ParserResult, state: State) => JSX.Element\n\ntype Rule<ParserOutput = ParserResult> = {\n  match: (\n    source: string,\n    state: State,\n    prevCapturedString?: string\n  ) => RegExpMatchArray\n  order: Priority\n  parse: Parser<ParserOutput>\n  react?: (\n    node: ParserOutput,\n    output: RuleOutput,\n    state?: State\n  ) => React.ReactChild\n}\n\ntype Rules = {\n  [key: string]: Rule\n}\n\n/**\n * RequireAtLeastOne<{ ... }> <- only requires at least one key\n */\ntype RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n  T,\n  Exclude<keyof T, Keys>\n> &\n  {\n    [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n  }[Keys]\n\ntype Override =\n  | RequireAtLeastOne<{\n      component: React.ComponentType<any>\n      props: Object\n    }>\n  | React.ComponentType<any>\n\ntype Overrides = {\n  [tag in HTMLTags]?: Override\n} & {\n  [customComponent: string]: Override\n}\n\ntype Options = Partial<{\n  /**\n   * Ultimate control over the output of all rendered JSX.\n   */\n  createElement: (\n    tag: Parameters<CreateElement>[0],\n    props: React.Props<any>,\n    ...children: React.ReactChild[]\n  ) => JSX.Element\n\n  /**\n   * Disable the compiler's best-effort transcription of provided raw HTML\n   * into JSX-equivalent. This is the functionality that prevents the need to\n   * use `dangerouslySetInnerHTML` in React.\n   */\n  disableParsingRawHTML: boolean\n\n  /**\n   * Forces the compiler to always output content with a block-level wrapper\n   * (`<p>` or any block-level syntax your markdown already contains.)\n   */\n  forceBlock: boolean\n\n  /**\n   * Forces the compiler to always output content with an inline wrapper (`<span>`)\n   */\n  forceInline: boolean\n\n  /**\n   * Supply additional HTML entity: unicode replacement mappings.\n   *\n   * Pass only the inner part of the entity as the key,\n   * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n   *\n   * By default\n   * the following entites are replaced with their unicode equivalents:\n   *\n   * ```\n   * &amp;\n   * &apos;\n   * &gt;\n   * &lt;\n   * &nbsp;\n   * &quot;\n   * ```\n   */\n  namedCodesToUnicode: {\n    [key: string]: string\n  }\n\n  /**\n   * Selectively control the output of particular HTML tags as they would be\n   * emitted by the compiler.\n   */\n  overrides: Overrides\n\n  /**\n   * Override normalization of non-URI-safe characters for use in generating\n   * HTML IDs for anchor linking purposes.\n   */\n  slugify: (source: string) => string\n}>\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = {\n  accesskey: 'accessKey',\n  allowfullscreen: 'allowFullScreen',\n  allowtransparency: 'allowTransparency',\n  autocomplete: 'autoComplete',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  charset: 'charSet',\n  class: 'className',\n  classid: 'classId',\n  colspan: 'colSpan',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  crossorigin: 'crossOrigin',\n  enctype: 'encType',\n  for: 'htmlFor',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formmethod: 'formMethod',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  hreflang: 'hrefLang',\n  inputmode: 'inputMode',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  marginheight: 'marginHeight',\n  marginwidth: 'marginWidth',\n  maxlength: 'maxLength',\n  mediagroup: 'mediaGroup',\n  minlength: 'minLength',\n  novalidate: 'noValidate',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  rowspan: 'rowSpan',\n  spellcheck: 'spellCheck',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  tabindex: 'tabIndex',\n  usemap: 'useMap',\n} as const\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_]) *){3,}(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R = /^\\s*(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)+\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+)\\n{0,2}/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceeded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z]+);/g\n\nconst HTML_COMMENT_R = /^<!--.*?-->/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^((?:[^\\n]|\\n(?! *\\n))+)(?:\\n *)+\\n/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s*(\\S+)\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1)/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\nconst TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R = /(^\\n+|\\n+$|\\s+$)/g\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^0-9A-Z\\s])/gi\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst LIST_BULLET = '(?:[*+-]|\\\\d+\\\\.)'\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst LIST_ITEM_PREFIX = '( *)(' + LIST_BULLET + ') +'\nconst LIST_ITEM_PREFIX_R = new RegExp('^' + LIST_ITEM_PREFIX)\n\n// recognize an individual list item:\n//  * hi\n//    this is part of the same item\n//\n//    as is this, which is a new paragraph in the same item\n//\n//  * but this is not part of the same item\nconst LIST_ITEM_R = new RegExp(\n  LIST_ITEM_PREFIX +\n    '[^\\\\n]*(?:\\\\n' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' )[^\\\\n]*)*(\\\\n|$)',\n  'gm'\n)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nconst LIST_R = new RegExp(\n  '^( *)(' +\n    LIST_BULLET +\n    ') ' +\n    '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n    '(?!\\\\1' +\n    LIST_BULLET +\n    ' (?!' +\n    LIST_BULLET +\n    ' ))\\\\n*' +\n    // the \\\\s*$ here is so that we can parse the inside of nested\n    // lists, where our content might end before we receive two `\\n`s\n    '|\\\\s*\\\\n*$)'\n)\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\n\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst IMAGE_R = new RegExp(\n  '^!\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\n\nconst BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_R,\n  CODE_BLOCK_FENCED_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_COMMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n  LIST_ITEM_R,\n  LIST_R,\n  NP_TABLE_R,\n  PARAGRAPH_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(source: string, parse: NestedParser, state: State) {\n  const prevInTable = state.inTable\n  state.inTable = true\n  const tableRow = parse(source.trim(), state)\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function(node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node.content = node.content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(source: string, parse: NestedParser, state: Object) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function(rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: NestedParser,\n  state: State\n) {\n  state.inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state.inline = false\n\n  return {\n    align: align,\n    cells: cells,\n    header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function(_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: JSX.IntrinsicAttributes,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function(styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: Rules\n): (source: string, state: State) => ReturnType<NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function(type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function(typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(source: string, state: State): ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: ParserResult | ParserResult[],\n    state: State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: NestedParser,\n  content: string,\n  state: State\n): ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: NestedParser,\n  content: string,\n  state: State\n): ParserResult {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(content, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(parse, content, state): ParserResult {\n  state.inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: Parser<ReturnType<typeof parseInline>> = (\n  capture,\n  parse,\n  state\n) => {\n  return {\n    content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: Rules) {\n  return function nestedRuleOutput(\n    ast: ParserResult,\n    outputFunc: RuleOutput,\n    state: State\n  ): React.ReactChild {\n    return rules[ast.type].react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(markdown: string, options: Options = {}) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: HTMLTags,\n    props: Parameters<CreateElement>[1] & {\n      className?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.replace(TRIM_NEWLINES_AND_TRAILING_WHITESPACE_R, '')}\\n\\n`,\n        { inline }\n      )\n    )\n\n    let jsx\n    if (arr.length > 1) {\n      jsx = inline ? (\n        <span key=\"outer\">{arr}</span>\n      ) : (\n        <div key=\"outer\">{arr}</div>\n      )\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        jsx = <span key=\"outer\">{jsx}</span>\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = <span key=\"outer\" />\n    }\n\n    return jsx\n  }\n\n  function attrStringToMap(str: string): React.Props<any> {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n\n    return attributes\n      ? attributes.reduce(function(map, raw, index) {\n          const delimiterIdx = raw.indexOf('=')\n\n          if (delimiterIdx !== -1) {\n            const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n            const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n            const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n            const normalizedValue = (map[\n              mappedKey\n            ] = attributeValueToJSXPropValue(key, value))\n\n            if (\n              typeof normalizedValue === 'string' &&\n              (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n                HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n            ) {\n              map[mappedKey] = React.cloneElement(\n                compile(normalizedValue.trim()),\n                { key: index }\n              )\n            }\n          } else if (raw !== 'style') {\n            map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n          }\n\n          return map\n        }, {})\n      : undefined\n  }\n\n  function stripHtmlComments(html) {\n    return html.replace(/<!--[\\s\\S]*?(?:-->)/g, '')\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: Rules = {\n    blockQuote: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      react(node, output, state) {\n        return (\n          <blockquote key={state.key}>{output(node.content, state)}</blockquote>\n        )\n      },\n    } as Rule<{ content: ParserResult }>,\n\n    breakLine: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    breakThematic: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      react(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    codeBlock: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          lang: undefined,\n        }\n      },\n\n      react(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code className={node.lang ? `lang-${node.lang}` : ''}>\n              {node.content}\n            </code>\n          </pre>\n        )\n      },\n    } as Rule<{ content: string; lang?: string }>,\n\n    codeFenced: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[3],\n          lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return <code key={state.key}>{node.content}</code>\n      },\n    } as Rule<{ content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    footnoteReference: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          content: capture[1],\n          target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.content}</sup>\n          </a>\n        )\n      },\n    } as Rule<{ content: string; target: string }>,\n\n    gfmTask: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      react(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as Rule<{ completed: boolean }>,\n\n    heading: {\n      match: blockRegex(HEADING_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length,\n        }\n      },\n      react(node, output, state) {\n        node.tag = `h${node.level}` as HTMLTags\n        return (\n          <node.tag id={node.id} key={state.key}>\n            {output(node.content, state)}\n          </node.tag>\n        )\n      },\n    } as Rule<{\n      content: ParserResult\n      id: string\n      level: number\n      tag: HTMLTags\n    }>,\n\n    headingSetext: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    image: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as Rule<{ alt?: string; target: string; title?: string }>,\n\n    link: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          content: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.content, state)}\n          </a>\n        )\n      },\n    } as Rule<{ content: ParserResult; target: string; title?: string }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: [\n            {\n              content: capture[1],\n              type: 'text',\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          content: [\n            {\n              content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    list: {\n      match(source, state, prevCapture) {\n        // We only want to break into a list if we are at the start of a\n        // line. This is to avoid parsing \"hi * there\" with \"* there\"\n        // becoming a part of a list.\n        // You might wonder, \"but that's inline, so of course it wouldn't\n        // start a list?\". You would be correct! Except that some of our\n        // lists can be inline, because they might be inside another list,\n        // in which case we can parse with inline scope, but need to allow\n        // nested lists inside this inline scope.\n        const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n        const isListBlock = state._list || !state.inline\n\n        if (isStartOfLine && isListBlock) {\n          source = isStartOfLine[1] + source\n\n          return LIST_R.exec(source)\n        } else {\n          return null\n        }\n      },\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const bullet = capture[2]\n        const ordered = bullet.length > 1\n        const start = ordered ? +bullet : undefined\n        const items = capture[0]\n          // recognize the end of a paragraph block inside a list item:\n          // two or more newlines at end end of the item\n          .replace(BLOCK_END_R, '\\n')\n          .match(LIST_ITEM_R)\n\n        let lastItemWasAParagraph = false\n        const itemContent = items.map(function(item, i) {\n          // We need to see how far indented the item is:\n          const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n          // And then we construct a regex to \"unindent\" the subsequent\n          // lines of the items by that amount:\n          const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n          // Before processing the item, we need a couple things\n          const content = item\n            // remove indents on trailing lines:\n            .replace(spaceRegex, '')\n            // remove the bullet:\n            .replace(LIST_ITEM_PREFIX_R, '')\n\n          // Handling \"loose\" lists, like:\n          //\n          //  * this is wrapped in a paragraph\n          //\n          //  * as is this\n          //\n          //  * as is this\n          const isLastItem = i === items.length - 1\n          const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n          // Any element in a list is a block if it contains multiple\n          // newlines. The last element in the list can also be a block\n          // if the previous item in the list was a block (this is\n          // because non-last items in the list can end with \\n\\n, but\n          // the last item can't, so we just \"inherit\" this property\n          // from our previous element).\n          const thisItemIsAParagraph =\n            containsBlocks || (isLastItem && lastItemWasAParagraph)\n          lastItemWasAParagraph = thisItemIsAParagraph\n\n          // backup our state for restoration afterwards. We're going to\n          // want to set state._list to true, and state.inline depending\n          // on our list's looseness.\n          const oldStateInline = state.inline\n          const oldStateList = state._list\n          state._list = true\n\n          // Parse inline if we're in a tight list, or block if we're in\n          // a loose list.\n          let adjustedContent\n          if (thisItemIsAParagraph) {\n            state.inline = false\n            adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n          } else {\n            state.inline = true\n            adjustedContent = content.replace(LIST_ITEM_END_R, '')\n          }\n\n          const result = parse(adjustedContent, state)\n\n          // Restore our state before returning\n          state.inline = oldStateInline\n          state._list = oldStateList\n\n          return result\n        })\n\n        return {\n          items: itemContent,\n          ordered: ordered,\n          start: start,\n        }\n      },\n      react(node, output, state) {\n        const Tag = node.ordered ? 'ol' : 'ul'\n\n        return (\n          <Tag key={state.key} start={node.start}>\n            {node.items.map(function generateListItem(item, i) {\n              return <li key={i}>{output(item, state)}</li>\n            })}\n          </Tag>\n        )\n      },\n    } as Rule<{ items: ParserResult[]; ordered: boolean; start?: number }>,\n\n    newlineCoalescer: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      match: blockRegex(PARAGRAPH_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <p key={state.key}>{output(node.content, state)}</p>\n      },\n    } as Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      react: renderNothing,\n    },\n\n    refImage: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        )\n      },\n    } as Rule<{ alt?: string; ref: string }>,\n\n    refLink: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          content: parse(capture[1], state),\n          fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      react(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.content, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackContent, state)}</span>\n        )\n      },\n    } as Rule<{\n      content: ParserResult\n      fallbackContent: ParserResult\n      ref: string\n    }>,\n\n    table: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      react(node, output, state) {\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {node.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      match: function(source, state) {\n        if (!state.inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      order: Priority.HIGH,\n      parse: function() {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      react(node /*, output, state*/) {\n        return node.content\n      },\n    } as Rule<{ content: string }>,\n\n    textBolded: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <strong key={state.key}>{output(node.content, state)}</strong>\n      },\n    } as Rule<ReturnType<NestedParser>>,\n\n    textEmphasized: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          content: parse(capture[2], state),\n        }\n      },\n      react(node, output, state) {\n        return <em key={state.key}>{output(node.content, state)}</em>\n      },\n    } as Rule<ReturnType<NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textStrikethroughed: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      react(node, output, state) {\n        return <del key={state.key}>{output(node.content, state)}</del>\n      },\n    } as Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //     let { match, parse } = rules[key];\n\n  //     rules[key].match = (...args) => {\n  //         const start = performance.now();\n  //         const result = match(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(\n  //                 `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${\n  //                     args[0]\n  //                 }`\n  //             );\n\n  //         return result;\n  //     };\n\n  //     rules[key].parse = (...args) => {\n  //         const start = performance.now();\n  //         const result = parse(...args);\n  //         const delta = performance.now() - start;\n\n  //         if (delta > 5)\n  //             console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`);\n\n  //         console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0]);\n\n  //         return result;\n  //     };\n  // });\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        return {\n          attrs: attrStringToMap(capture[2]),\n          /**\n           * if another html block is detected within, parse as block,\n           * otherwise parse as inline to pick up any further markdown\n           */\n          content: noInnerParse ? capture[3] : parseFunc(parse, trimmed, state),\n\n          noInnerParse,\n\n          tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node.tag key={state.key} {...node.attrs}>\n            {node.noInnerParse\n              ? (node.content as string)\n              : output(node.content as ParserResult, state)}\n          </node.tag>\n        )\n      },\n    } as Rule<{\n      attrs: ReturnType<typeof attrStringToMap>\n      content: string | ReturnType<NestedParser>\n      noInnerParse: Boolean\n      tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1],\n        }\n      },\n      react(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    } as Rule<{ attrs: ReturnType<typeof attrStringToMap>; tag: string }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter = reactFor(ruleOutput(rules))\n\n  const jsx = compile(stripHtmlComments(markdown))\n\n  if (footnotes.length) {\n    jsx.props.children.push(\n      <footer key=\"footer\">\n        {footnotes.map(function createFootnote(def) {\n          return (\n            <div id={options.slugify(def.identifier)} key={def.identifier}>\n              {def.identifier}\n              {emitter(parser(def.footnote, { inline: true }))}\n            </div>\n          )\n        })}\n      </footer>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.Props<any>\n  )\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}
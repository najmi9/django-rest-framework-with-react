{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': ['action', 'bindattr', 'collection', 'component', 'concat', 'debugger', 'each', 'each-in', 'get', 'hash', 'if', 'in', 'input', 'link-to', 'loc', 'log', 'lookup', 'mut', 'outlet', 'partial', 'query-params', 'render', 'template', 'textarea', 'unbound', 'unless', 'view', 'with', 'yield'].join(\" \")\n  };\n  const LITERALS = {\n    literal: ['true', 'false', 'undefined', 'null'].join(\" \")\n  }; // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX = /\".*?\"/;\n  const SINGLE_QUOTED_ID_REGEX = /'.*?'/;\n  const BRACKET_QUOTED_ID_REGEX = /\\[.*?\\]/;\n  const PLAIN_ID_REGEX = /[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX = /\\.|\\//;\n  const IDENTIFIER_REGEX = concat('(', SINGLE_QUOTED_ID_REGEX, '|', DOUBLE_QUOTED_ID_REGEX, '|', BRACKET_QUOTED_ID_REGEX, '|', PLAIN_ID_REGEX, '|', PATH_DELIMITER_REGEX, ')+'); // identifier followed by a equal-sign (without the equal sign)\n\n  const HASH_PARAM_REGEX = concat('(', BRACKET_QUOTED_ID_REGEX, '|', PLAIN_ID_REGEX, ')(?==)');\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/ // the \"contains\" is added below when all necessary sub-modes are defined\n\n  };\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, HELPER_PARAMETER, SUB_EXPRESSION]\n      }\n    }\n  };\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: {\n      keyword: 'as'\n    },\n    end: /\\|/,\n    contains: [{\n      // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n      begin: /\\w+/\n    }]\n  };\n  const HELPER_PARAMETERS = {\n    contains: [hljs.NUMBER_MODE, hljs.QUOTE_STRING_MODE, hljs.APOS_STRING_MODE, BLOCK_PARAMS, HASH, HELPER_PARAMETER, SUB_EXPRESSION],\n    returnEnd: true // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n\n  };\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/\n    })\n  });\n  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /}}/\n    })\n  });\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /}}/\n    })\n  });\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\{\\{/,\n    skip: true\n  };\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {\n    begin: /\\\\\\\\(?=\\{\\{)/,\n    skip: true\n  };\n  return {\n    name: 'Handlebars',\n    aliases: ['hbs', 'html.hbs', 'html.handlebars', 'htmlbars'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH, PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH, hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/), hljs.COMMENT(/\\{\\{!/, /\\}\\}/), {\n      // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n      className: 'template-tag',\n      begin: /\\{\\{\\{\\{(?!\\/)/,\n      end: /\\}\\}\\}\\}/,\n      contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n      starts: {\n        end: /\\{\\{\\{\\{\\//,\n        returnEnd: true,\n        subLanguage: 'xml'\n      }\n    }, {\n      // close raw block\n      className: 'template-tag',\n      begin: /\\{\\{\\{\\{\\//,\n      end: /\\}\\}\\}\\}/,\n      contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      // open block statement\n      className: 'template-tag',\n      begin: /\\{\\{#/,\n      end: /\\}\\}/,\n      contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      className: 'template-tag',\n      begin: /\\{\\{(?=else\\}\\})/,\n      end: /\\}\\}/,\n      keywords: 'else'\n    }, {\n      // closing block statement\n      className: 'template-tag',\n      begin: /\\{\\{\\//,\n      end: /\\}\\}/,\n      contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n    }, {\n      // template variable or helper-call that is NOT html-escaped\n      className: 'template-variable',\n      begin: /\\{\\{\\{/,\n      end: /\\}\\}\\}/,\n      contains: [BASIC_MUSTACHE_CONTENTS]\n    }, {\n      // template variable or helper-call that is html-escaped\n      className: 'template-variable',\n      begin: /\\{\\{/,\n      end: /\\}\\}/,\n      contains: [BASIC_MUSTACHE_CONTENTS]\n    }]\n  };\n}\n\nmodule.exports = handlebars;","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/lowlight/node_modules/highlight.js/lib/languages/handlebars.js"],"names":["source","re","concat","args","joined","map","x","join","handlebars","hljs","BUILT_INS","LITERALS","literal","DOUBLE_QUOTED_ID_REGEX","SINGLE_QUOTED_ID_REGEX","BRACKET_QUOTED_ID_REGEX","PLAIN_ID_REGEX","PATH_DELIMITER_REGEX","IDENTIFIER_REGEX","HASH_PARAM_REGEX","HELPER_NAME_OR_PATH_EXPRESSION","begin","lexemes","HELPER_PARAMETER","inherit","keywords","SUB_EXPRESSION","end","HASH","className","relevance","starts","contains","NUMBER_MODE","QUOTE_STRING_MODE","APOS_STRING_MODE","BLOCK_PARAMS","keyword","HELPER_PARAMETERS","returnEnd","SUB_EXPRESSION_CONTENTS","OPENING_BLOCK_MUSTACHE_CONTENTS","CLOSING_BLOCK_MUSTACHE_CONTENTS","BASIC_MUSTACHE_CONTENTS","ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH","skip","PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH","name","aliases","case_insensitive","subLanguage","COMMENT","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: Handlebars\nRequires: xml.js\nAuthor: Robin Ward <robin.ward@gmail.com>\nDescription: Matcher for Handlebars as well as EmberJS additions.\nWebsite: https://handlebarsjs.com\nCategory: template\n*/\n\nfunction handlebars(hljs) {\n  const BUILT_INS = {\n    'builtin-name': [\n      'action',\n      'bindattr',\n      'collection',\n      'component',\n      'concat',\n      'debugger',\n      'each',\n      'each-in',\n      'get',\n      'hash',\n      'if',\n      'in',\n      'input',\n      'link-to',\n      'loc',\n      'log',\n      'lookup',\n      'mut',\n      'outlet',\n      'partial',\n      'query-params',\n      'render',\n      'template',\n      'textarea',\n      'unbound',\n      'unless',\n      'view',\n      'with',\n      'yield'\n    ].join(\" \")\n  };\n\n  const LITERALS = {\n    literal: [\n      'true',\n      'false',\n      'undefined',\n      'null'\n    ].join(\" \")\n  };\n\n  // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments\n  // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths\n  // like a/b, ./abc/cde, and abc.bcd\n\n  const DOUBLE_QUOTED_ID_REGEX=/\".*?\"/;\n  const SINGLE_QUOTED_ID_REGEX=/'.*?'/;\n  const BRACKET_QUOTED_ID_REGEX=/\\[.*?\\]/;\n  const PLAIN_ID_REGEX=/[^\\s!\"#%&'()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]+/;\n  const PATH_DELIMITER_REGEX=/\\.|\\//;\n\n  const IDENTIFIER_REGEX = concat(\n    '(',\n    SINGLE_QUOTED_ID_REGEX, '|',\n    DOUBLE_QUOTED_ID_REGEX, '|',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX, '|',\n    PATH_DELIMITER_REGEX,\n    ')+'\n  );\n\n  // identifier followed by a equal-sign (without the equal sign)\n  const HASH_PARAM_REGEX = concat(\n    '(',\n    BRACKET_QUOTED_ID_REGEX, '|',\n    PLAIN_ID_REGEX,\n    ')(?==)'\n  );\n\n  const HELPER_NAME_OR_PATH_EXPRESSION = {\n    begin: IDENTIFIER_REGEX,\n    lexemes: /[\\w.\\/]+/\n  };\n\n  const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: LITERALS\n  });\n\n  const SUB_EXPRESSION = {\n    begin: /\\(/,\n    end: /\\)/\n    // the \"contains\" is added below when all necessary sub-modes are defined\n  };\n\n  const HASH = {\n    // fka \"attribute-assignment\", parameters of the form 'key=value'\n    className: 'attr',\n    begin: HASH_PARAM_REGEX,\n    relevance: 0,\n    starts: {\n      begin: /=/,\n      end: /=/,\n      starts: {\n        contains: [\n          hljs.NUMBER_MODE,\n          hljs.QUOTE_STRING_MODE,\n          hljs.APOS_STRING_MODE,\n          HELPER_PARAMETER,\n          SUB_EXPRESSION\n        ]\n      }\n    }\n  };\n\n  const BLOCK_PARAMS = {\n    // parameters of the form '{{#with x as | y |}}...{{/with}}'\n    begin: /as\\s+\\|/,\n    keywords: { keyword: 'as' },\n    end: /\\|/,\n    contains: [\n      {\n        // define sub-mode in order to prevent highlighting of block-parameter named \"as\"\n        begin: /\\w+/\n      }\n    ]\n  };\n\n  const HELPER_PARAMETERS = {\n    contains: [\n      hljs.NUMBER_MODE,\n      hljs.QUOTE_STRING_MODE,\n      hljs.APOS_STRING_MODE,\n      BLOCK_PARAMS,\n      HASH,\n      HELPER_PARAMETER,\n      SUB_EXPRESSION\n    ],\n    returnEnd: true\n    // the property \"end\" is defined through inheritance when the mode is used. If depends\n    // on the surrounding mode, but \"endsWithParent\" does not work here (i.e. it includes the\n    // end-token of the surrounding mode)\n  };\n\n  const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /\\)/,\n    })\n  });\n\n  SUB_EXPRESSION.contains = [\n    SUB_EXPRESSION_CONTENTS\n  ];\n\n  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name',\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /}}/,\n    })\n  });\n\n  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    keywords: BUILT_INS,\n    className: 'name'\n  });\n\n  const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {\n    className: 'name',\n    keywords: BUILT_INS,\n    starts: hljs.inherit(HELPER_PARAMETERS, {\n      end: /}}/,\n    })\n  });\n\n  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {begin: /\\\\\\{\\{/, skip: true};\n  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {begin: /\\\\\\\\(?=\\{\\{)/, skip: true};\n\n  return {\n    name: 'Handlebars',\n    aliases: ['hbs', 'html.hbs', 'html.handlebars', 'htmlbars'],\n    case_insensitive: true,\n    subLanguage: 'xml',\n    contains: [\n      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,\n      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,\n      hljs.COMMENT(/\\{\\{!--/, /--\\}\\}/),\n      hljs.COMMENT(/\\{\\{!/, /\\}\\}/),\n      {\n        // open raw block \"{{{{raw}}}} content not evaluated {{{{/raw}}}}\"\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{(?!\\/)/,\n        end: /\\}\\}\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n        starts: {end: /\\{\\{\\{\\{\\//, returnEnd: true, subLanguage: 'xml'}\n      },\n      {\n        // close raw block\n        className: 'template-tag',\n        begin: /\\{\\{\\{\\{\\//,\n        end: /\\}\\}\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]\n      },\n      {\n        // open block statement\n        className: 'template-tag',\n        begin: /\\{\\{#/,\n        end: /\\}\\}/,\n        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],\n      },\n      {\n        className: 'template-tag',\n        begin: /\\{\\{(?=else\\}\\})/,\n        end: /\\}\\}/,\n        keywords: 'else'\n      },\n      {\n        // closing block statement\n        className: 'template-tag',\n        begin: /\\{\\{\\//,\n        end: /\\}\\}/,\n        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS],\n      },\n      {\n        // template variable or helper-call that is NOT html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{\\{/,\n        end: /\\}\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      },\n      {\n        // template variable or helper-call that is html-escaped\n        className: 'template-variable',\n        begin: /\\{\\{/,\n        end: /\\}\\}/,\n        contains: [BASIC_MUSTACHE_CONTENTS]\n      }\n    ]\n  };\n}\n\nmodule.exports = handlebars;\n"]},"metadata":{},"sourceType":"script"}
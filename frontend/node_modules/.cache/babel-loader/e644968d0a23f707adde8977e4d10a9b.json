{"ast":null,"code":"/*\nLanguage: C-like foundation grammar for C/C++ grammars\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\nCategory: common, system\n*/\n\n/* In the future the intention is to split out the C/C++ grammars distinctly\nsince they are separate languages.  They will likely share a common foundation\nthough, and this file sets the groundwork for that - so that we get the breaking\nchange in v10 and don't have to change the requirements again later.\n\nSee: https://github.com/highlightjs/highlight.js/issues/2146\n*/\n\n/** @type LanguageFn */\nfunction cLike(hljs) {\n  function optional(s) {\n    return '(?:' + s + ')?';\n  }\n\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\n  var FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) + ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<.*?>/,\n      end: /$/,\n      illegal: '\\\\n'\n    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid wchar_t ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' + 'concept co_await co_return co_yield requires ' + 'noexcept static_assert thread_local restrict final override ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    // the base c-like language will NEVER be auto-detected, rather the\n    // derivitives: c, c++, arduino turn auto-detect back on for themselves\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      // containers: ie, `vector <int> rooms (9);`\n      begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'class struct',\n      end: /[{;:]/,\n      contains: [{\n        begin: /</,\n        end: />/,\n        contains: ['self']\n      }, // skip generic stuff\n      hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = cLike;","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/highlight.js/lib/languages/c-like.js"],"names":["cLike","hljs","optional","s","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","begin","CHARACTER_ESCAPES","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","concat","FUNCTION_DECLARATION","returnBegin","excludeEnd","aliases","disableAutodetect","exports","preprocessor","strings","module"],"mappings":"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","sourcesContent":["/*\nLanguage: C-like foundation grammar for C/C++ grammars\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nContributors: Evgeny Stepanischev <imbolk@gmail.com>, Zaven Muradyan <megalivoithos@gmail.com>, Roel Deckers <admin@codingcat.nl>, Sam Wu <samsam2310@gmail.com>, Jordi Petit <jordi.petit@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, Google Inc. (David Benjamin) <davidben@google.com>\nCategory: common, system\n*/\n\n/* In the future the intention is to split out the C/C++ grammars distinctly\nsince they are separate languages.  They will likely share a common foundation\nthough, and this file sets the groundwork for that - so that we get the breaking\nchange in v10 and don't have to change the requirements again later.\n\nSee: https://github.com/highlightjs/highlight.js/issues/2146\n*/\n\n/** @type LanguageFn */\nfunction cLike(hljs) {\n  function optional(s) {\n    return '(?:' + s + ')?';\n  }\n  var DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  var NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  var TEMPLATE_ARGUMENT_RE = '<.*?>';\n  var FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +'[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  var CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\", end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/,\n      })\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  var FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  var EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {begin: /=/, end: /;/},\n      {begin: /\\(/, end: /\\)/},\n      {beginKeywords: 'new throw return else', end: /;/}\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  var FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true, end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>]/,\n    contains: [\n\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n      },\n      {\n        begin: FUNCTION_TITLE, returnBegin: true,\n        contains: [TITLE_MODE],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/, end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    // the base c-like language will NEVER be auto-detected, rather the\n    // derivitives: c, c++, arduino turn auto-detect back on for themselves\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n      PREPROCESSOR,\n      { // containers: ie, `vector <int> rooms (9);`\n        begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = cLike;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"'use strict';\n\nvar refractorBash = require('./bash.js');\n\nmodule.exports = shellSession;\nshellSession.displayName = 'shellSession';\nshellSession.aliases = [];\n\nfunction shellSession(Prism) {\n  Prism.register(refractorBash);\n\n  (function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [// normal string\n    // 1 capturing group\n    /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/.source, // here doc\n    // 1 capturing group\n    /<<-?\\s*(\\w+?)[ \\t]*(?!.)[\\s\\S]*?[\\r\\n]\\2/.source, // here doc quoted\n    // 2 capturing group\n    /<<-?\\s*([\"'])(\\w+)\\3[ \\t]*(?!.)[\\s\\S]*?[\\r\\n]\\4/.source].join('|');\n    Prism.languages['shell-session'] = {\n      info: {\n        // foo@bar:~/files$ exit\n        // foo@bar$ exit\n        pattern: /^[^\\r\\n$#*!]+(?=[$#])/m,\n        alias: 'punctuation',\n        inside: {\n          path: {\n            pattern: /(:)[\\s\\S]+/,\n            lookbehind: true\n          },\n          user: /^[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+(?=:|$)/,\n          punctuation: /:/\n        }\n      },\n      command: {\n        pattern: RegExp(/[$#](?:[^\\\\\\r\\n'\"<]|\\\\.|<<str>>)+/.source.replace(/<<str>>/g, function () {\n          return strings;\n        })),\n        greedy: true,\n        inside: {\n          bash: {\n            pattern: /(^[$#]\\s*)[\\s\\S]+/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/refractor/lang/shell-session.js"],"names":["refractorBash","require","module","exports","shellSession","displayName","aliases","Prism","register","strings","source","join","languages","info","pattern","alias","inside","path","lookbehind","user","punctuation","command","RegExp","replace","greedy","bash","output"],"mappings":"AAAA;;AACA,IAAIA,aAAa,GAAGC,OAAO,CAAC,WAAD,CAA3B;;AACAC,MAAM,CAACC,OAAP,GAAiBC,YAAjB;AACAA,YAAY,CAACC,WAAb,GAA2B,cAA3B;AACAD,YAAY,CAACE,OAAb,GAAuB,EAAvB;;AACA,SAASF,YAAT,CAAsBG,KAAtB,EAA6B;AAC3BA,EAAAA,KAAK,CAACC,QAAN,CAAeR,aAAf;;AACC,GAAC,UAAUO,KAAV,EAAiB;AACjB;AACA;AACA,QAAIE,OAAO,GAAG,CACZ;AACA;AACA,4DAAwDC,MAH5C,EAGoD;AAChE;AACA,+CAA2CA,MAL/B,EAKuC;AACnD;AACA,sDAAkDA,MAPtC,EAQZC,IARY,CAQP,GARO,CAAd;AASAJ,IAAAA,KAAK,CAACK,SAAN,CAAgB,eAAhB,IAAmC;AACjCC,MAAAA,IAAI,EAAE;AACJ;AACA;AACAC,QAAAA,OAAO,EAAE,wBAHL;AAIJC,QAAAA,KAAK,EAAE,aAJH;AAKJC,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE;AACJH,YAAAA,OAAO,EAAE,YADL;AAEJI,YAAAA,UAAU,EAAE;AAFR,WADA;AAKNC,UAAAA,IAAI,EAAE,yCALA;AAMNC,UAAAA,WAAW,EAAE;AANP;AALJ,OAD2B;AAejCC,MAAAA,OAAO,EAAE;AACPP,QAAAA,OAAO,EAAEQ,MAAM,CACb,oCAAoCZ,MAApC,CAA2Ca,OAA3C,CACE,UADF,EAEE,YAAY;AACV,iBAAOd,OAAP;AACD,SAJH,CADa,CADR;AASPe,QAAAA,MAAM,EAAE,IATD;AAUPR,QAAAA,MAAM,EAAE;AACNS,UAAAA,IAAI,EAAE;AACJX,YAAAA,OAAO,EAAE,mBADL;AAEJI,YAAAA,UAAU,EAAE,IAFR;AAGJH,YAAAA,KAAK,EAAE,eAHH;AAIJC,YAAAA,MAAM,EAAET,KAAK,CAACK,SAAN,CAAgBa;AAJpB,WADA;AAON,0BAAgB;AACdX,YAAAA,OAAO,EAAE,OADK;AAEdC,YAAAA,KAAK,EAAE;AAFO;AAPV;AAVD,OAfwB;AAsCjCW,MAAAA,MAAM,EAAE;AAtCyB,KAAnC;AAwCD,GApDA,EAoDEnB,KApDF;AAqDF","sourcesContent":["'use strict'\nvar refractorBash = require('./bash.js')\nmodule.exports = shellSession\nshellSession.displayName = 'shellSession'\nshellSession.aliases = []\nfunction shellSession(Prism) {\n  Prism.register(refractorBash)\n  ;(function (Prism) {\n    // CAREFUL!\n    // The following patterns are concatenated, so the group referenced by a back reference is non-obvious!\n    var strings = [\n      // normal string\n      // 1 capturing group\n      /([\"'])(?:\\\\[\\s\\S]|\\$\\([^)]+\\)|`[^`]+`|(?!\\1)[^\\\\])*\\1/.source, // here doc\n      // 1 capturing group\n      /<<-?\\s*(\\w+?)[ \\t]*(?!.)[\\s\\S]*?[\\r\\n]\\2/.source, // here doc quoted\n      // 2 capturing group\n      /<<-?\\s*([\"'])(\\w+)\\3[ \\t]*(?!.)[\\s\\S]*?[\\r\\n]\\4/.source\n    ].join('|')\n    Prism.languages['shell-session'] = {\n      info: {\n        // foo@bar:~/files$ exit\n        // foo@bar$ exit\n        pattern: /^[^\\r\\n$#*!]+(?=[$#])/m,\n        alias: 'punctuation',\n        inside: {\n          path: {\n            pattern: /(:)[\\s\\S]+/,\n            lookbehind: true\n          },\n          user: /^[^\\s@:$#*!/\\\\]+@[^\\s@:$#*!/\\\\]+(?=:|$)/,\n          punctuation: /:/\n        }\n      },\n      command: {\n        pattern: RegExp(\n          /[$#](?:[^\\\\\\r\\n'\"<]|\\\\.|<<str>>)+/.source.replace(\n            /<<str>>/g,\n            function () {\n              return strings\n            }\n          )\n        ),\n        greedy: true,\n        inside: {\n          bash: {\n            pattern: /(^[$#]\\s*)[\\s\\S]+/,\n            lookbehind: true,\n            alias: 'language-bash',\n            inside: Prism.languages.bash\n          },\n          'shell-symbol': {\n            pattern: /^[$#]/,\n            alias: 'important'\n          }\n        }\n      },\n      output: /.(?:.*(?:[\\r\\n]|.$))*/\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/home/chemime/Desktop/Python/django/trainingapp/frontend/src/utils/my-loadable.jsx\";\nimport Loadable from 'react-loadable';\nimport Loader from '../Components/Loader';\nimport React from 'react';\n\nconst ErrorHandle = props => /*#__PURE__*/React.createElement(\"div\", {\n  className: \"bg-light m- p-5\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 33\n  }\n}, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }\n}, \"Error! \"), /*#__PURE__*/React.createElement(\"button\", {\n  onClick: props.retry,\n  className: \"btn btn-warning text-light\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 12\n  }\n}, \"Retry \", /*#__PURE__*/React.createElement(\"i\", {\n  className: \"fas fa-load\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 21\n  }\n})));\n\nfunction Loading(props) {\n  if (props.error) {\n    return /*#__PURE__*/React.createElement(ErrorHandle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }\n    });\n  } else if (props.timedOut) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 12\n      }\n    }, \"Taking a long time... \", /*#__PURE__*/React.createElement(\"button\", {\n      onClick: props.retry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 39\n      }\n    }, \"Retry\"));\n  } else if (props.pastDelay) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return null;\n  }\n}\n\nexport default function MyLoadable(opts) {\n  return Loadable(Object.assign({\n    loading: Loading,\n    delay: 200,\n    timeout: 10000\n  }, opts));\n}\n;","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/src/utils/my-loadable.jsx"],"names":["Loadable","Loader","React","ErrorHandle","props","retry","Loading","error","timedOut","pastDelay","MyLoadable","opts","Object","assign","loading","delay","timeout"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,WAAW,GAAIC,KAAD,iBAAY;AAAK,EAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADqB,eAErB;AAAQ,EAAA,OAAO,EAAGA,KAAK,CAACC,KAAxB;AAAgC,EAAA,SAAS,EAAC,4BAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACS;AAAG,EAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADT,CAFqB,CAAhC;;AAOA,SAASC,OAAT,CAAiBF,KAAjB,EAAwB;AACtB,MAAIA,KAAK,CAACG,KAAV,EAAiB;AACf,wBAAQ,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACD,GAFD,MAEO,IAAIH,KAAK,CAACI,QAAV,EAAoB;AACzB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAA2B;AAAQ,MAAA,OAAO,EAAGJ,KAAK,CAACC,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA3B,CAAP;AACD,GAFM,MAGF,IAAID,KAAK,CAACK,SAAV,EAAqB;AACxB,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFI,MAEE;AACL,WAAO,IAAP;AACD;AACF;;AAED,eAAe,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACvC,SAAOX,QAAQ,CAACY,MAAM,CAACC,MAAP,CAAc;AAC5BC,IAAAA,OAAO,EAAER,OADmB;AAE5BS,IAAAA,KAAK,EAAE,GAFqB;AAG5BC,IAAAA,OAAO,EAAE;AAHmB,GAAd,EAIbL,IAJa,CAAD,CAAf;AAKD;AAAA","sourcesContent":["import Loadable from 'react-loadable';\nimport Loader from '../Components/Loader';\nimport React from 'react';\nconst ErrorHandle = (props) => (<div className=\"bg-light m- p-5\">\n           <h1>Error! </h1>\n           <button onClick={ props.retry } className=\"btn btn-warning text-light\">\n              Retry <i className=\"fas fa-load\"></i>\n          </button>\n           </div>)\n\nfunction Loading(props) {\n  if (props.error) {\n    return (<ErrorHandle />);\n  } else if (props.timedOut) {\n    return <div>Taking a long time... <button onClick={ props.retry }>Retry</button></div>;\n  }\n  else if (props.pastDelay) {\n    return <Loader />;\n  } else {\n    return null;\n  }\n}\n\nexport default function MyLoadable(opts) {\n  return Loadable(Object.assign({\n    loading: Loading,\n    delay: 200,\n    timeout: 10000,\n  }, opts));\n};\n"]},"metadata":{},"sourceType":"module"}
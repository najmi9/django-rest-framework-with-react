{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Calls a specific handler function for all events that are encountered.\n *\n * @param func — The function to multiplex all events to.\n */\n\nvar MultiplexHandler =\n/** @class */\nfunction () {\n  function MultiplexHandler(func) {\n    this._func = func;\n  }\n  /* Format: eventname: number of arguments */\n\n\n  MultiplexHandler.prototype.onattribute = function (name, value) {\n    this._func(\"onattribute\", name, value);\n  };\n\n  MultiplexHandler.prototype.oncdatastart = function () {\n    this._func(\"oncdatastart\");\n  };\n\n  MultiplexHandler.prototype.oncdataend = function () {\n    this._func(\"oncdataend\");\n  };\n\n  MultiplexHandler.prototype.ontext = function (text) {\n    this._func(\"ontext\", text);\n  };\n\n  MultiplexHandler.prototype.onprocessinginstruction = function (name, value) {\n    this._func(\"onprocessinginstruction\", name, value);\n  };\n\n  MultiplexHandler.prototype.oncomment = function (comment) {\n    this._func(\"oncomment\", comment);\n  };\n\n  MultiplexHandler.prototype.oncommentend = function () {\n    this._func(\"oncommentend\");\n  };\n\n  MultiplexHandler.prototype.onclosetag = function (name) {\n    this._func(\"onclosetag\", name);\n  };\n\n  MultiplexHandler.prototype.onopentag = function (name, attribs) {\n    this._func(\"onopentag\", name, attribs);\n  };\n\n  MultiplexHandler.prototype.onopentagname = function (name) {\n    this._func(\"onopentagname\", name);\n  };\n\n  MultiplexHandler.prototype.onerror = function (error) {\n    this._func(\"onerror\", error);\n  };\n\n  MultiplexHandler.prototype.onend = function () {\n    this._func(\"onend\");\n  };\n\n  MultiplexHandler.prototype.onparserinit = function (parser) {\n    this._func(\"onparserinit\", parser);\n  };\n\n  MultiplexHandler.prototype.onreset = function () {\n    this._func(\"onreset\");\n  };\n\n  return MultiplexHandler;\n}();\n\nexports.default = MultiplexHandler;","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/htmlparser2/lib/MultiplexHandler.js"],"names":["Object","defineProperty","exports","value","MultiplexHandler","func","_func","prototype","onattribute","name","oncdatastart","oncdataend","ontext","text","onprocessinginstruction","oncomment","comment","oncommentend","onclosetag","onopentag","attribs","onopentagname","onerror","error","onend","onparserinit","parser","onreset","default"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACA;;;;;;AAKA,IAAIC,gBAAgB;AAAG;AAAe,YAAY;AAC9C,WAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,SAAKC,KAAL,GAAaD,IAAb;AACH;AACD;;;AACAD,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BC,WAA3B,GAAyC,UAAUC,IAAV,EAAgBN,KAAhB,EAAuB;AAC5D,SAAKG,KAAL,CAAW,aAAX,EAA0BG,IAA1B,EAAgCN,KAAhC;AACH,GAFD;;AAGAC,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BG,YAA3B,GAA0C,YAAY;AAClD,SAAKJ,KAAL,CAAW,cAAX;AACH,GAFD;;AAGAF,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BI,UAA3B,GAAwC,YAAY;AAChD,SAAKL,KAAL,CAAW,YAAX;AACH,GAFD;;AAGAF,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BK,MAA3B,GAAoC,UAAUC,IAAV,EAAgB;AAChD,SAAKP,KAAL,CAAW,QAAX,EAAqBO,IAArB;AACH,GAFD;;AAGAT,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BO,uBAA3B,GAAqD,UAAUL,IAAV,EAAgBN,KAAhB,EAAuB;AACxE,SAAKG,KAAL,CAAW,yBAAX,EAAsCG,IAAtC,EAA4CN,KAA5C;AACH,GAFD;;AAGAC,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BQ,SAA3B,GAAuC,UAAUC,OAAV,EAAmB;AACtD,SAAKV,KAAL,CAAW,WAAX,EAAwBU,OAAxB;AACH,GAFD;;AAGAZ,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BU,YAA3B,GAA0C,YAAY;AAClD,SAAKX,KAAL,CAAW,cAAX;AACH,GAFD;;AAGAF,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BW,UAA3B,GAAwC,UAAUT,IAAV,EAAgB;AACpD,SAAKH,KAAL,CAAW,YAAX,EAAyBG,IAAzB;AACH,GAFD;;AAGAL,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BY,SAA3B,GAAuC,UAAUV,IAAV,EAAgBW,OAAhB,EAAyB;AAC5D,SAAKd,KAAL,CAAW,WAAX,EAAwBG,IAAxB,EAA8BW,OAA9B;AACH,GAFD;;AAGAhB,EAAAA,gBAAgB,CAACG,SAAjB,CAA2Bc,aAA3B,GAA2C,UAAUZ,IAAV,EAAgB;AACvD,SAAKH,KAAL,CAAW,eAAX,EAA4BG,IAA5B;AACH,GAFD;;AAGAL,EAAAA,gBAAgB,CAACG,SAAjB,CAA2Be,OAA3B,GAAqC,UAAUC,KAAV,EAAiB;AAClD,SAAKjB,KAAL,CAAW,SAAX,EAAsBiB,KAAtB;AACH,GAFD;;AAGAnB,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BiB,KAA3B,GAAmC,YAAY;AAC3C,SAAKlB,KAAL,CAAW,OAAX;AACH,GAFD;;AAGAF,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BkB,YAA3B,GAA0C,UAAUC,MAAV,EAAkB;AACxD,SAAKpB,KAAL,CAAW,cAAX,EAA2BoB,MAA3B;AACH,GAFD;;AAGAtB,EAAAA,gBAAgB,CAACG,SAAjB,CAA2BoB,OAA3B,GAAqC,YAAY;AAC7C,SAAKrB,KAAL,CAAW,SAAX;AACH,GAFD;;AAGA,SAAOF,gBAAP;AACH,CAhDqC,EAAtC;;AAiDAF,OAAO,CAAC0B,OAAR,GAAkBxB,gBAAlB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Calls a specific handler function for all events that are encountered.\n *\n * @param func — The function to multiplex all events to.\n */\nvar MultiplexHandler = /** @class */ (function () {\n    function MultiplexHandler(func) {\n        this._func = func;\n    }\n    /* Format: eventname: number of arguments */\n    MultiplexHandler.prototype.onattribute = function (name, value) {\n        this._func(\"onattribute\", name, value);\n    };\n    MultiplexHandler.prototype.oncdatastart = function () {\n        this._func(\"oncdatastart\");\n    };\n    MultiplexHandler.prototype.oncdataend = function () {\n        this._func(\"oncdataend\");\n    };\n    MultiplexHandler.prototype.ontext = function (text) {\n        this._func(\"ontext\", text);\n    };\n    MultiplexHandler.prototype.onprocessinginstruction = function (name, value) {\n        this._func(\"onprocessinginstruction\", name, value);\n    };\n    MultiplexHandler.prototype.oncomment = function (comment) {\n        this._func(\"oncomment\", comment);\n    };\n    MultiplexHandler.prototype.oncommentend = function () {\n        this._func(\"oncommentend\");\n    };\n    MultiplexHandler.prototype.onclosetag = function (name) {\n        this._func(\"onclosetag\", name);\n    };\n    MultiplexHandler.prototype.onopentag = function (name, attribs) {\n        this._func(\"onopentag\", name, attribs);\n    };\n    MultiplexHandler.prototype.onopentagname = function (name) {\n        this._func(\"onopentagname\", name);\n    };\n    MultiplexHandler.prototype.onerror = function (error) {\n        this._func(\"onerror\", error);\n    };\n    MultiplexHandler.prototype.onend = function () {\n        this._func(\"onend\");\n    };\n    MultiplexHandler.prototype.onparserinit = function (parser) {\n        this._func(\"onparserinit\", parser);\n    };\n    MultiplexHandler.prototype.onreset = function () {\n        this._func(\"onreset\");\n    };\n    return MultiplexHandler;\n}());\nexports.default = MultiplexHandler;\n"]},"metadata":{},"sourceType":"script"}
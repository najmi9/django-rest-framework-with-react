{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    float: 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  var len = num.toString().length;\n  return \"\".concat(len, \"em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [newChild];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue; // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: style['code[class*=\"language-\"]']\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? false : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, allLineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined\n     */\n\n\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle);\n    return React.createElement(PreTag, preProps, React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/react-syntax-highlighter/dist/esm/highlight.js"],"names":["_objectWithoutProperties","_objectSpread","React","createElement","checkForListedLanguage","newLineRegex","getNewLines","str","match","getAllLineNumbers","_ref","lines","startingLineNumber","style","map","_","i","number","key","concat","className","AllLineNumbers","_ref2","codeString","codeStyle","_ref2$containerStyle","containerStyle","float","paddingRight","_ref2$numberStyle","numberStyle","Object","assign","replace","split","getEmWidthOfNumber","num","len","toString","length","getInlineLineNumber","lineNumber","inlineLineNumberStyle","type","tagName","properties","children","value","assembleLineNumberStyles","lineNumberStyle","largestLineNumber","defaultLineNumberStyle","display","minWidth","textAlign","userSelect","customLineNumberStyle","assembledStyle","createLineElement","_ref3","showInlineLineNumbers","_ref3$lineProps","lineProps","_ref3$className","unshift","flattenCodeTree","tree","arguments","undefined","newTree","node","push","classNames","processLines","codeTree","wrapLines","showLineNumbers","_ref4","lastLineBreakIndex","index","createWrappedLine","createUnwrappedLine","createLine","_loop","newLines","splitValue","forEach","text","newChild","_children","slice","_line","stringChild","lastLineInPreviousSpan","newElem","splice","_children2","_line2","_children3","_line3","line","apply","defaultRenderer","_ref5","rows","stylesheet","useInlineStyles","isHighlightJs","astGenerator","highlightAuto","getCodeTree","_ref6","language","code","defaultCodeValue","hasLanguage","highlight","e","defaultAstGenerator","defaultStyle","SyntaxHighlighter","_ref7","_ref7$style","_ref7$customStyle","customStyle","_ref7$codeTagProps","codeTagProps","_ref7$useInlineStyles","_ref7$showLineNumbers","_ref7$showInlineLineN","_ref7$startingLineNum","lineNumberContainerStyle","_ref7$lineNumberStyle","_ref7$lineProps","renderer","_ref7$PreTag","PreTag","_ref7$CodeTag","CodeTag","_ref7$code","Array","isArray","rest","allLineNumbers","defaultPreStyle","hljs","backgroundColor","generatorClassName","preProps"],"mappings":"AAAA,OAAOA,wBAAP,MAAqC,gDAArC;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,IAAIC,YAAY,GAAG,KAAnB;;AAEA,SAASC,WAAT,CAAqBC,GAArB,EAA0B;AACxB,SAAOA,GAAG,CAACC,KAAJ,CAAUH,YAAV,CAAP;AACD;;AAED,SAASI,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,kBAAkB,GAAGF,IAAI,CAACE,kBAD9B;AAAA,MAEIC,KAAK,GAAGH,IAAI,CAACG,KAFjB;AAGA,SAAOF,KAAK,CAACG,GAAN,CAAU,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC/B,QAAIC,MAAM,GAAGD,CAAC,GAAGJ,kBAAjB;AACA,WAAOV,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;AACjCe,MAAAA,GAAG,EAAE,QAAQC,MAAR,CAAeH,CAAf,CAD4B;AAEjCI,MAAAA,SAAS,EAAE,sCAFsB;AAGjCP,MAAAA,KAAK,EAAE,OAAOA,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACI,MAAD,CAAnC,GAA8CJ;AAHpB,KAA5B,EAIJ,GAAGM,MAAH,CAAUF,MAAV,EAAkB,IAAlB,CAJI,CAAP;AAKD,GAPM,CAAP;AAQD;;AAED,SAASI,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAIC,UAAU,GAAGD,KAAK,CAACC,UAAvB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,oBAAoB,GAAGH,KAAK,CAACI,cAFjC;AAAA,MAGIA,cAAc,GAAGD,oBAAoB,KAAK,KAAK,CAA9B,GAAkC;AACrDE,IAAAA,KAAK,EAAE,MAD8C;AAErDC,IAAAA,YAAY,EAAE;AAFuC,GAAlC,GAGjBH,oBANJ;AAAA,MAOII,iBAAiB,GAAGP,KAAK,CAACQ,WAP9B;AAAA,MAQIA,WAAW,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,EAA/B,GAAoCA,iBARtD;AAAA,MASIjB,kBAAkB,GAAGU,KAAK,CAACV,kBAT/B;AAUA,SAAOV,KAAK,CAACC,aAAN,CAAoB,MAApB,EAA4B;AACjCU,IAAAA,KAAK,EAAEkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,SAAlB,EAA6BE,cAA7B;AAD0B,GAA5B,EAEJjB,iBAAiB,CAAC;AACnBE,IAAAA,KAAK,EAAEY,UAAU,CAACU,OAAX,CAAmB,KAAnB,EAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,IAApC,CADY;AAEnBrB,IAAAA,KAAK,EAAEiB,WAFY;AAGnBlB,IAAAA,kBAAkB,EAAEA;AAHD,GAAD,CAFb,CAAP;AAOD;;AAED,SAASuB,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,MAAIC,GAAG,GAAGD,GAAG,CAACE,QAAJ,GAAeC,MAAzB;AACA,SAAO,GAAGpB,MAAH,CAAUkB,GAAV,EAAe,IAAf,CAAP;AACD;;AAED,SAASG,mBAAT,CAA6BC,UAA7B,EAAyCC,qBAAzC,EAAgE;AAC9D,SAAO;AACLC,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA,OAAO,EAAE,MAFJ;AAGLC,IAAAA,UAAU,EAAE;AACV3B,MAAAA,GAAG,EAAE,gBAAgBC,MAAhB,CAAuBsB,UAAvB,CADK;AAEVrB,MAAAA,SAAS,EAAE,CAAC,SAAD,EAAY,YAAZ,EAA0B,sCAA1B,CAFD;AAGVP,MAAAA,KAAK,EAAE6B;AAHG,KAHP;AAQLI,IAAAA,QAAQ,EAAE,CAAC;AACTH,MAAAA,IAAI,EAAE,MADG;AAETI,MAAAA,KAAK,EAAEN;AAFE,KAAD;AARL,GAAP;AAaD;;AAED,SAASO,wBAAT,CAAkCC,eAAlC,EAAmDR,UAAnD,EAA+DS,iBAA/D,EAAkF;AAChF;AACA,MAAIC,sBAAsB,GAAG;AAC3BC,IAAAA,OAAO,EAAE,cADkB;AAE3BC,IAAAA,QAAQ,EAAElB,kBAAkB,CAACe,iBAAD,CAFD;AAG3BtB,IAAAA,YAAY,EAAE,KAHa;AAI3B0B,IAAAA,SAAS,EAAE,OAJgB;AAK3BC,IAAAA,UAAU,EAAE;AALe,GAA7B,CAFgF,CAQ7E;;AAEH,MAAIC,qBAAqB,GAAG,OAAOP,eAAP,KAA2B,UAA3B,GAAwCA,eAAe,CAACR,UAAD,CAAvD,GAAsEQ,eAAlG,CAVgF,CAUmC;;AAEnH,MAAIQ,cAAc,GAAGxD,aAAa,CAAC,EAAD,EAAKkD,sBAAL,EAA6BK,qBAA7B,CAAlC;;AAEA,SAAOC,cAAP;AACD;;AAED,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAIb,QAAQ,GAAGa,KAAK,CAACb,QAArB;AAAA,MACIL,UAAU,GAAGkB,KAAK,CAAClB,UADvB;AAAA,MAEIQ,eAAe,GAAGU,KAAK,CAACV,eAF5B;AAAA,MAGIC,iBAAiB,GAAGS,KAAK,CAACT,iBAH9B;AAAA,MAIIU,qBAAqB,GAAGD,KAAK,CAACC,qBAJlC;AAAA,MAKIC,eAAe,GAAGF,KAAK,CAACG,SAL5B;AAAA,MAMIA,SAAS,GAAGD,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eANlD;AAAA,MAOIE,eAAe,GAAGJ,KAAK,CAACvC,SAP5B;AAAA,MAQIA,SAAS,GAAG2C,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eARlD;AASA,MAAIlB,UAAU,GAAG,OAAOiB,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAACrB,UAAD,CAA3C,GAA0DqB,SAA3E;AACAjB,EAAAA,UAAU,CAAC,WAAD,CAAV,GAA0BzB,SAA1B;;AAEA,MAAIqB,UAAU,IAAImB,qBAAlB,EAAyC;AACvC,QAAIlB,qBAAqB,GAAGM,wBAAwB,CAACC,eAAD,EAAkBR,UAAlB,EAA8BS,iBAA9B,CAApD;AACAJ,IAAAA,QAAQ,CAACkB,OAAT,CAAiBxB,mBAAmB,CAACC,UAAD,EAAaC,qBAAb,CAApC;AACD;;AAED,SAAO;AACLC,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA,OAAO,EAAE,MAFJ;AAGLC,IAAAA,UAAU,EAAEA,UAHP;AAILC,IAAAA,QAAQ,EAAEA;AAJL,GAAP;AAMD;;AAED,SAASmB,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,MAAI9C,SAAS,GAAG+C,SAAS,CAAC5B,MAAV,GAAmB,CAAnB,IAAwB4B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;AACA,MAAIE,OAAO,GAAGF,SAAS,CAAC5B,MAAV,GAAmB,CAAnB,IAAwB4B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;;AAEA,OAAK,IAAInD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,IAAI,CAAC3B,MAAzB,EAAiCvB,CAAC,EAAlC,EAAsC;AACpC,QAAIsD,IAAI,GAAGJ,IAAI,CAAClD,CAAD,CAAf;;AAEA,QAAIsD,IAAI,CAAC3B,IAAL,KAAc,MAAlB,EAA0B;AACxB0B,MAAAA,OAAO,CAACE,IAAR,CAAab,iBAAiB,CAAC;AAC7BZ,QAAAA,QAAQ,EAAE,CAACwB,IAAD,CADmB;AAE7BlD,QAAAA,SAAS,EAAEA;AAFkB,OAAD,CAA9B;AAID,KALD,MAKO,IAAIkD,IAAI,CAACxB,QAAT,EAAmB;AACxB,UAAI0B,UAAU,GAAGpD,SAAS,CAACD,MAAV,CAAiBmD,IAAI,CAACzB,UAAL,CAAgBzB,SAAjC,CAAjB;AACAiD,MAAAA,OAAO,GAAGA,OAAO,CAAClD,MAAR,CAAe8C,eAAe,CAACK,IAAI,CAACxB,QAAN,EAAgB0B,UAAhB,CAA9B,CAAV;AACD;AACF;;AAED,SAAOH,OAAP;AACD;;AAED,SAASI,YAAT,CAAsBC,QAAtB,EAAgCC,SAAhC,EAA2Cb,SAA3C,EAAsDc,eAAtD,EAAuEhB,qBAAvE,EAA8FhD,kBAA9F,EAAkHsC,iBAAlH,EAAqID,eAArI,EAAsJ;AACpJ,MAAI4B,KAAJ;;AAEA,MAAIX,IAAI,GAAGD,eAAe,CAACS,QAAQ,CAAC3B,KAAV,CAA1B;AACA,MAAIsB,OAAO,GAAG,EAAd;AACA,MAAIS,kBAAkB,GAAG,CAAC,CAA1B;AACA,MAAIC,KAAK,GAAG,CAAZ;;AAEA,WAASC,iBAAT,CAA2BlC,QAA3B,EAAqCL,UAArC,EAAiD;AAC/C,QAAIrB,SAAS,GAAG+C,SAAS,CAAC5B,MAAV,GAAmB,CAAnB,IAAwB4B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;AACA,WAAOT,iBAAiB,CAAC;AACvBZ,MAAAA,QAAQ,EAAEA,QADa;AAEvBL,MAAAA,UAAU,EAAEA,UAFW;AAGvBQ,MAAAA,eAAe,EAAEA,eAHM;AAIvBC,MAAAA,iBAAiB,EAAEA,iBAJI;AAKvBU,MAAAA,qBAAqB,EAAEA,qBALA;AAMvBE,MAAAA,SAAS,EAAEA,SANY;AAOvB1C,MAAAA,SAAS,EAAEA;AAPY,KAAD,CAAxB;AASD;;AAED,WAAS6D,mBAAT,CAA6BnC,QAA7B,EAAuCL,UAAvC,EAAmD;AACjD,QAAIA,UAAU,IAAImB,qBAAlB,EAAyC;AACvC,UAAIlB,qBAAqB,GAAGM,wBAAwB,CAACC,eAAD,EAAkBR,UAAlB,EAA8BS,iBAA9B,CAApD;AACAJ,MAAAA,QAAQ,CAACkB,OAAT,CAAiBxB,mBAAmB,CAACC,UAAD,EAAaC,qBAAb,CAApC;AACD;;AAED,WAAOI,QAAP;AACD;;AAED,WAASoC,UAAT,CAAoBpC,QAApB,EAA8BL,UAA9B,EAA0C;AACxC,QAAIrB,SAAS,GAAG+C,SAAS,CAAC5B,MAAV,GAAmB,CAAnB,IAAwB4B,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAApF;AACA,WAAOQ,SAAS,IAAIvD,SAAS,CAACmB,MAAV,GAAmB,CAAhC,GAAoCyC,iBAAiB,CAAClC,QAAD,EAAWL,UAAX,EAAuBrB,SAAvB,CAArD,GAAyF6D,mBAAmB,CAACnC,QAAD,EAAWL,UAAX,CAAnH;AACD;;AAED,MAAI0C,KAAK,GAAG,SAASA,KAAT,GAAiB;AAC3B,QAAIb,IAAI,GAAGJ,IAAI,CAACa,KAAD,CAAf;AACA,QAAIhC,KAAK,GAAGuB,IAAI,CAACxB,QAAL,CAAc,CAAd,EAAiBC,KAA7B;AACA,QAAIqC,QAAQ,GAAG9E,WAAW,CAACyC,KAAD,CAA1B;;AAEA,QAAIqC,QAAJ,EAAc;AACZ,UAAIC,UAAU,GAAGtC,KAAK,CAACb,KAAN,CAAY,IAAZ,CAAjB;AACAmD,MAAAA,UAAU,CAACC,OAAX,CAAmB,UAAUC,IAAV,EAAgBvE,CAAhB,EAAmB;AACpC,YAAIyB,UAAU,GAAGmC,eAAe,IAAIP,OAAO,CAAC9B,MAAR,GAAiB3B,kBAArD;AACA,YAAI4E,QAAQ,GAAG;AACb7C,UAAAA,IAAI,EAAE,MADO;AAEbI,UAAAA,KAAK,EAAE,GAAG5B,MAAH,CAAUoE,IAAV,EAAgB,IAAhB;AAFM,SAAf,CAFoC,CAKjC;;AAEH,YAAIvE,CAAC,KAAK,CAAV,EAAa;AACX,cAAIyE,SAAS,GAAGvB,IAAI,CAACwB,KAAL,CAAWZ,kBAAkB,GAAG,CAAhC,EAAmCC,KAAnC,EAA0C5D,MAA1C,CAAiDuC,iBAAiB,CAAC;AACjFZ,YAAAA,QAAQ,EAAE,CAAC0C,QAAD,CADuE;AAEjFpE,YAAAA,SAAS,EAAEkD,IAAI,CAACzB,UAAL,CAAgBzB;AAFsD,WAAD,CAAlE,CAAhB;;AAKA,cAAIuE,KAAK,GAAGT,UAAU,CAACO,SAAD,EAAYhD,UAAZ,CAAtB;;AAEA4B,UAAAA,OAAO,CAACE,IAAR,CAAaoB,KAAb,EARW,CAQU;AACtB,SATD,MASO,IAAI3E,CAAC,KAAKqE,UAAU,CAAC9C,MAAX,GAAoB,CAA9B,EAAiC;AACtC,cAAIqD,WAAW,GAAG1B,IAAI,CAACa,KAAK,GAAG,CAAT,CAAJ,IAAmBb,IAAI,CAACa,KAAK,GAAG,CAAT,CAAJ,CAAgBjC,QAAnC,IAA+CoB,IAAI,CAACa,KAAK,GAAG,CAAT,CAAJ,CAAgBjC,QAAhB,CAAyB,CAAzB,CAAjE;;AAEA,cAAI8C,WAAJ,EAAiB;AACf,gBAAIC,sBAAsB,GAAG;AAC3BlD,cAAAA,IAAI,EAAE,MADqB;AAE3BI,cAAAA,KAAK,EAAE,GAAG5B,MAAH,CAAUoE,IAAV;AAFoB,aAA7B;AAIA,gBAAIO,OAAO,GAAGpC,iBAAiB,CAAC;AAC9BZ,cAAAA,QAAQ,EAAE,CAAC+C,sBAAD,CADoB;AAE9BzE,cAAAA,SAAS,EAAEkD,IAAI,CAACzB,UAAL,CAAgBzB;AAFG,aAAD,CAA/B;AAIA8C,YAAAA,IAAI,CAAC6B,MAAL,CAAYhB,KAAK,GAAG,CAApB,EAAuB,CAAvB,EAA0Be,OAA1B;AACD,WAVD,MAUO;AACL,gBAAIE,UAAU,GAAG,CAACR,QAAD,CAAjB;;AAEA,gBAAIS,MAAM,GAAGf,UAAU,CAACc,UAAD,EAAavD,UAAb,EAAyB6B,IAAI,CAACzB,UAAL,CAAgBzB,SAAzC,CAAvB;;AAEAiD,YAAAA,OAAO,CAACE,IAAR,CAAa0B,MAAb;AACD,WAnBqC,CAmBpC;;AAEH,SArBM,MAqBA;AACL,cAAIC,UAAU,GAAG,CAACV,QAAD,CAAjB;;AAEA,cAAIW,MAAM,GAAGjB,UAAU,CAACgB,UAAD,EAAazD,UAAb,EAAyB6B,IAAI,CAACzB,UAAL,CAAgBzB,SAAzC,CAAvB;;AAEAiD,UAAAA,OAAO,CAACE,IAAR,CAAa4B,MAAb;AACD;AACF,OA5CD;AA6CArB,MAAAA,kBAAkB,GAAGC,KAArB;AACD;;AAEDA,IAAAA,KAAK;AACN,GAxDD;;AA0DA,SAAOA,KAAK,GAAGb,IAAI,CAAC3B,MAApB,EAA4B;AAC1B4C,IAAAA,KAAK;AACN;;AAED,MAAIL,kBAAkB,KAAKZ,IAAI,CAAC3B,MAAL,GAAc,CAAzC,EAA4C;AAC1C,QAAIO,QAAQ,GAAGoB,IAAI,CAACwB,KAAL,CAAWZ,kBAAkB,GAAG,CAAhC,EAAmCZ,IAAI,CAAC3B,MAAxC,CAAf;;AAEA,QAAIO,QAAQ,IAAIA,QAAQ,CAACP,MAAzB,EAAiC;AAC/B,UAAIE,UAAU,GAAG4B,OAAO,CAAC9B,MAAR,GAAiB3B,kBAAlC;AACA,UAAIwF,IAAI,GAAGlB,UAAU,CAACpC,QAAD,EAAWL,UAAX,CAArB;AACA4B,MAAAA,OAAO,CAACE,IAAR,CAAa6B,IAAb;AACD;AACF;;AAED,SAAOzB,SAAS,GAAGN,OAAH,GAAa,CAACQ,KAAK,GAAG,EAAT,EAAa1D,MAAb,CAAoBkF,KAApB,CAA0BxB,KAA1B,EAAiCR,OAAjC,CAA7B;AACD;;AAED,SAASiC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAIC,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,MACIC,UAAU,GAAGF,KAAK,CAACE,UADvB;AAAA,MAEIC,eAAe,GAAGH,KAAK,CAACG,eAF5B;AAGA,SAAOF,IAAI,CAAC1F,GAAL,CAAS,UAAUwD,IAAV,EAAgBtD,CAAhB,EAAmB;AACjC,WAAOb,aAAa,CAAC;AACnBmE,MAAAA,IAAI,EAAEA,IADa;AAEnBmC,MAAAA,UAAU,EAAEA,UAFO;AAGnBC,MAAAA,eAAe,EAAEA,eAHE;AAInBxF,MAAAA,GAAG,EAAE,gBAAgBC,MAAhB,CAAuBH,CAAvB;AAJc,KAAD,CAApB;AAMD,GAPM,CAAP;AAQD,C,CAAC;;;AAGF,SAAS2F,aAAT,CAAuBC,YAAvB,EAAqC;AACnC,SAAOA,YAAY,IAAI,OAAOA,YAAY,CAACC,aAApB,KAAsC,WAA7D;AACD;;AAED,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIH,YAAY,GAAGG,KAAK,CAACH,YAAzB;AAAA,MACII,QAAQ,GAAGD,KAAK,CAACC,QADrB;AAAA,MAEIC,IAAI,GAAGF,KAAK,CAACE,IAFjB;AAAA,MAGIC,gBAAgB,GAAGH,KAAK,CAACG,gBAH7B,CAD0B,CAM1B;AACA;AACA;;AACA,MAAIP,aAAa,CAACC,YAAD,CAAjB,EAAiC;AAC/B,QAAIO,WAAW,GAAG/G,sBAAsB,CAACwG,YAAD,EAAeI,QAAf,CAAxC;;AAEA,QAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvB,aAAO;AACLjE,QAAAA,KAAK,EAAEmE,gBADF;AAELF,QAAAA,QAAQ,EAAE;AAFL,OAAP;AAID,KALD,MAKO,IAAIG,WAAJ,EAAiB;AACtB,aAAOP,YAAY,CAACQ,SAAb,CAAuBJ,QAAvB,EAAiCC,IAAjC,CAAP;AACD,KAFM,MAEA;AACL,aAAOL,YAAY,CAACC,aAAb,CAA2BI,IAA3B,CAAP;AACD;AACF,GAtByB,CAsBxB;;;AAGF,MAAI;AACF,WAAOD,QAAQ,IAAIA,QAAQ,KAAK,MAAzB,GAAkC;AACvCjE,MAAAA,KAAK,EAAE6D,YAAY,CAACQ,SAAb,CAAuBH,IAAvB,EAA6BD,QAA7B;AADgC,KAAlC,GAEH;AACFjE,MAAAA,KAAK,EAAEmE;AADL,KAFJ;AAKD,GAND,CAME,OAAOG,CAAP,EAAU;AACV,WAAO;AACLtE,MAAAA,KAAK,EAAEmE;AADF,KAAP;AAGD;AACF;;AAED,eAAe,UAAUI,mBAAV,EAA+BC,YAA/B,EAA6C;AAC1D,SAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AACvC,QAAIT,QAAQ,GAAGS,KAAK,CAACT,QAArB;AAAA,QACIlE,QAAQ,GAAG2E,KAAK,CAAC3E,QADrB;AAAA,QAEI4E,WAAW,GAAGD,KAAK,CAAC5G,KAFxB;AAAA,QAGIA,KAAK,GAAG6G,WAAW,KAAK,KAAK,CAArB,GAAyBH,YAAzB,GAAwCG,WAHpD;AAAA,QAIIC,iBAAiB,GAAGF,KAAK,CAACG,WAJ9B;AAAA,QAKIA,WAAW,GAAGD,iBAAiB,KAAK,KAAK,CAA3B,GAA+B,EAA/B,GAAoCA,iBALtD;AAAA,QAMIE,kBAAkB,GAAGJ,KAAK,CAACK,YAN/B;AAAA,QAOIA,YAAY,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC;AACjDzG,MAAAA,SAAS,EAAE4F,QAAQ,GAAG,YAAY7F,MAAZ,CAAmB6F,QAAnB,CAAH,GAAkC5C,SADJ;AAEjDvD,MAAAA,KAAK,EAAEA,KAAK,CAAC,0BAAD;AAFqC,KAAhC,GAGfgH,kBAVJ;AAAA,QAWIE,qBAAqB,GAAGN,KAAK,CAACf,eAXlC;AAAA,QAYIA,eAAe,GAAGqB,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,IAAnC,GAA0CA,qBAZhE;AAAA,QAaIC,qBAAqB,GAAGP,KAAK,CAAC7C,eAblC;AAAA,QAcIA,eAAe,GAAGoD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAdjE;AAAA,QAeIC,qBAAqB,GAAGR,KAAK,CAAC7D,qBAflC;AAAA,QAgBIA,qBAAqB,GAAGqE,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,KAAnC,GAA2CA,qBAhBvE;AAAA,QAiBIC,qBAAqB,GAAGT,KAAK,CAAC7G,kBAjBlC;AAAA,QAkBIA,kBAAkB,GAAGsH,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,CAAnC,GAAuCA,qBAlBhE;AAAA,QAmBIC,wBAAwB,GAAGV,KAAK,CAACU,wBAnBrC;AAAA,QAoBIC,qBAAqB,GAAGX,KAAK,CAACxE,eApBlC;AAAA,QAqBIA,eAAe,GAAGmF,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBArB9D;AAAA,QAsBIzD,SAAS,GAAG8C,KAAK,CAAC9C,SAtBtB;AAAA,QAuBI0D,eAAe,GAAGZ,KAAK,CAAC3D,SAvB5B;AAAA,QAwBIA,SAAS,GAAGuE,eAAe,KAAK,KAAK,CAAzB,GAA6B,EAA7B,GAAkCA,eAxBlD;AAAA,QAyBIC,QAAQ,GAAGb,KAAK,CAACa,QAzBrB;AAAA,QA0BIC,YAAY,GAAGd,KAAK,CAACe,MA1BzB;AAAA,QA2BIA,MAAM,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,KAA1B,GAAkCA,YA3B/C;AAAA,QA4BIE,aAAa,GAAGhB,KAAK,CAACiB,OA5B1B;AAAA,QA6BIA,OAAO,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,MAA3B,GAAoCA,aA7BlD;AAAA,QA8BIE,UAAU,GAAGlB,KAAK,CAACR,IA9BvB;AAAA,QA+BIA,IAAI,GAAG0B,UAAU,KAAK,KAAK,CAApB,GAAwBC,KAAK,CAACC,OAAN,CAAc/F,QAAd,IAA0BA,QAAQ,CAAC,CAAD,CAAlC,GAAwCA,QAAhE,GAA2E6F,UA/BtF;AAAA,QAgCI/B,YAAY,GAAGa,KAAK,CAACb,YAhCzB;AAAA,QAiCIkC,IAAI,GAAG9I,wBAAwB,CAACyH,KAAD,EAAQ,CAAC,UAAD,EAAa,UAAb,EAAyB,OAAzB,EAAkC,aAAlC,EAAiD,cAAjD,EAAiE,iBAAjE,EAAoF,iBAApF,EAAuG,uBAAvG,EAAgI,oBAAhI,EAAsJ,0BAAtJ,EAAkL,iBAAlL,EAAqM,WAArM,EAAkN,WAAlN,EAA+N,UAA/N,EAA2O,QAA3O,EAAqP,SAArP,EAAgQ,MAAhQ,EAAwQ,cAAxQ,CAAR,CAjCnC;;AAmCAb,IAAAA,YAAY,GAAGA,YAAY,IAAIU,mBAA/B;AACA,QAAIyB,cAAc,GAAGnE,eAAe,GAAG1E,KAAK,CAACC,aAAN,CAAoBkB,cAApB,EAAoC;AACzEK,MAAAA,cAAc,EAAEyG,wBADyD;AAEzE3G,MAAAA,SAAS,EAAEsG,YAAY,CAACjH,KAAb,IAAsB,EAFwC;AAGzEiB,MAAAA,WAAW,EAAEmB,eAH4D;AAIzErC,MAAAA,kBAAkB,EAAEA,kBAJqD;AAKzEW,MAAAA,UAAU,EAAE0F;AAL6D,KAApC,CAAH,GAM/B,IANL;AAOA,QAAI+B,eAAe,GAAGnI,KAAK,CAACoI,IAAN,IAAcpI,KAAK,CAAC,yBAAD,CAAnB,IAAkD;AACtEqI,MAAAA,eAAe,EAAE;AADqD,KAAxE;AAGA,QAAIC,kBAAkB,GAAGxC,aAAa,CAACC,YAAD,CAAb,GAA8B,MAA9B,GAAuC,SAAhE;AACA,QAAIwC,QAAQ,GAAG1C,eAAe,GAAG3E,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB8G,IAAlB,EAAwB;AACvDjI,MAAAA,KAAK,EAAEkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBgH,eAAlB,EAAmCpB,WAAnC;AADgD,KAAxB,CAAH,GAEzB7F,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB8G,IAAlB,EAAwB;AAC3B1H,MAAAA,SAAS,EAAE0H,IAAI,CAAC1H,SAAL,GAAiB,GAAGD,MAAH,CAAUgI,kBAAV,EAA8B,GAA9B,EAAmChI,MAAnC,CAA0C2H,IAAI,CAAC1H,SAA/C,CAAjB,GAA6E+H,kBAD7D;AAE3BtI,MAAAA,KAAK,EAAEkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB4F,WAAlB;AAFoB,KAAxB,CAFL;;AAOA,QAAI,CAAChB,YAAL,EAAmB;AACjB,aAAO1G,KAAK,CAACC,aAAN,CAAoBqI,MAApB,EAA4BY,QAA5B,EAAsCL,cAAtC,EAAsD7I,KAAK,CAACC,aAAN,CAAoBuI,OAApB,EAA6BZ,YAA7B,EAA2Cb,IAA3C,CAAtD,CAAP;AACD;AACD;;;;;;AAMAtC,IAAAA,SAAS,GAAG2D,QAAQ,IAAI3D,SAAS,KAAKP,SAA1B,GAAsC,IAAtC,GAA6CO,SAAzD;AACA2D,IAAAA,QAAQ,GAAGA,QAAQ,IAAIhC,eAAvB;AACA,QAAIY,gBAAgB,GAAG,CAAC;AACtBvE,MAAAA,IAAI,EAAE,MADgB;AAEtBI,MAAAA,KAAK,EAAEkE;AAFe,KAAD,CAAvB;AAIA,QAAIvC,QAAQ,GAAGoC,WAAW,CAAC;AACzBF,MAAAA,YAAY,EAAEA,YADW;AAEzBI,MAAAA,QAAQ,EAAEA,QAFe;AAGzBC,MAAAA,IAAI,EAAEA,IAHmB;AAIzBC,MAAAA,gBAAgB,EAAEA;AAJO,KAAD,CAA1B;;AAOA,QAAIxC,QAAQ,CAACsC,QAAT,KAAsB,IAA1B,EAAgC;AAC9BtC,MAAAA,QAAQ,CAAC3B,KAAT,GAAiBmE,gBAAjB;AACD,KA/EsC,CA+ErC;;;AAGF,QAAIhE,iBAAiB,GAAGwB,QAAQ,CAAC3B,KAAT,CAAeR,MAAf,GAAwB3B,kBAAhD;AACA,QAAI4F,IAAI,GAAG/B,YAAY,CAACC,QAAD,EAAWC,SAAX,EAAsBb,SAAtB,EAAiCc,eAAjC,EAAkDhB,qBAAlD,EAAyEhD,kBAAzE,EAA6FsC,iBAA7F,EAAgHD,eAAhH,CAAvB;AACA,WAAO/C,KAAK,CAACC,aAAN,CAAoBqI,MAApB,EAA4BY,QAA5B,EAAsClJ,KAAK,CAACC,aAAN,CAAoBuI,OAApB,EAA6BZ,YAA7B,EAA2C,CAAClE,qBAAD,IAA0BmF,cAArE,EAAqFT,QAAQ,CAAC;AACzI9B,MAAAA,IAAI,EAAEA,IADmI;AAEzIC,MAAAA,UAAU,EAAE5F,KAF6H;AAGzI6F,MAAAA,eAAe,EAAEA;AAHwH,KAAD,CAA7F,CAAtC,CAAP;AAKD,GAzFD;AA0FD","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    float: 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  var len = num.toString().length;\n  return \"\".concat(len, \"em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread({}, defaultLineNumberStyle, customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: className\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      newTree = newTree.concat(flattenCodeTree(node.children, classNames));\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n\n          if (stringChild) {\n            var lastLineInPreviousSpan = {\n              type: 'text',\n              value: \"\".concat(text)\n            };\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [newChild];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue;\n\n  // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: style['code[class*=\"language-\"]']\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? false : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? Array.isArray(children) ? children[0] : children : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"]);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (!astGenerator) {\n      return React.createElement(PreTag, preProps, allLineNumbers, React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined\n     */\n\n\n    wrapLines = renderer && wrapLines === undefined ? true : wrapLines;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle);\n    return React.createElement(PreTag, preProps, React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}"]},"metadata":{},"sourceType":"module"}
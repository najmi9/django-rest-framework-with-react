{"ast":null,"code":"export default class SpinningDots extends HTMLElement {\n  static get observedAttributes() {\n    return ['dots'];\n  }\n\n  constructor() {\n    super();\n    this.root = this.attachShadow({\n      mode: 'open'\n    });\n  }\n\n  connectedCallback() {\n    const styles = window.getComputedStyle(this);\n    const width = this.intFromPx(styles.width, 28);\n    const strokeWidth = this.intFromPx(styles.strokeWidth, 4 / 28 * width, 1);\n    const circles = this.intFromPx(this.getAttribute('dots'), 8);\n    this.root.innerHTML = `<div>\n    ${this.buildStyles(width, circles, strokeWidth)}\n    <svg class=\"circles\" viewBox=\"0 0 ${width} ${width}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      ${this.buildCircles(width, circles, strokeWidth / 2)}\n    </svg>\n    ${this.buildTrail(width, strokeWidth)}\n    </div>`;\n  }\n\n  attributeChangedCallback() {\n    const styles = window.getComputedStyle(this);\n    const width = this.intFromPx(styles.width, 28);\n    const circles = this.intFromPx(this.getAttribute('dots'), 8);\n    const strokeWidth = this.intFromPx(styles.strokeWidth, 4 / 28 * width, 1);\n    if (this.root.querySelector(\".circles\") != null) this.root.querySelector(\".circles\").innerHTML = this.buildCircles(width, circles, strokeWidth / 2);\n  }\n\n  disconnectedCallback() {\n    this.root.innerHTML = '';\n  }\n  /**\n   * Builds a SVG with n circles equally spaced around a circle\n   * @param {number} w canvas width\n   * @param {number} n circles count\n   * @param {number} r circles radius\n   * @return {string}\n   */\n\n\n  buildCircles(w, n, r) {\n    const circleRadius = w / 2 - r;\n    let dom = \"\";\n\n    for (let i = 0; i < n; i++) {\n      const a = Math.PI / (n / 2) * i;\n      const x = circleRadius * Math.sin(a) + w / 2;\n      const y = circleRadius * Math.cos(a) + w / 2;\n      dom += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${r}\" fill=\"currentColor\"/>`;\n    }\n\n    return dom;\n  }\n  /**\n   * Builds a SVG circle\n   * @param {number} w canvas width\n   * @param {number} stroke stroke width\n   * @return {string}\n   */\n\n\n  buildTrail(w, stroke) {\n    return `<svg class=\"halo\" viewBox=\"0 0 ${w} ${w}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"${w / 2}\" cy=\"${w / 2}\" r=\"${w / 2 - stroke / 2}\" stroke-width=\"${stroke}\" stroke-linecap=\"round\" stroke=\"currentColor\"/>\n</svg>`;\n  }\n  /**\n   * Build the style\n   * @param {number} w canvas width\n   * @param {number} n number of section for the trail\n   * @param {number} stroke size of the stroke\n   * @return {string}\n   */\n\n\n  buildStyles(w, n, stroke) {\n    const offset = Math.PI * (w - stroke);\n    return `<style>\n      :host {\n        display: inline-block;\n        width: ${w}px;\n        height: ${w}px;\n      }\n      div {\n        animation: fadeIn .4s cubic-bezier(.1,.6,.3,1);\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n      svg {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n      .circles {\n        animation: spin 16s linear infinite;\n      }\n      .halo {\n        animation: spin2 1.6s cubic-bezier(.5,.15,.5,.85)  infinite;\n      } \n      .halo circle {\n        stroke-dasharray: ${offset};\n        stroke-dashoffset: ${offset + offset / n};\n        animation: trail 1.6s cubic-bezier(.5,.15,.5,.85)   infinite;\n      }\n      @keyframes spin {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(360deg); }\n      }\n      @keyframes spin2 {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(720deg); }\n      }\n      @keyframes trail {\n        0% { stroke-dashoffset: ${offset + offset / n}; }\n        50% { stroke-dashoffset: ${offset + 2.5 * offset / n}; }\n        100% { stroke-dashoffset: ${offset + offset / n}; }\n      }\n      @keyframes fadeIn {\n        from { opacity: 0; transform: scale(.1) }\n        to { opacity: 1; transform: scale(1) }\n      }\n    </style>`;\n  }\n  /**\n   * Extract an int from a string\n   * @param {string} value \"20px\" \"auto\"\n   * @param {number} initial default value\n   * @param {number} min assign default value if the value is under this threshold\n   */\n\n\n  intFromPx(value, initial, min = 0) {\n    if (value === null || value === undefined) {\n      return initial;\n    }\n\n    value = parseInt(value.replace('px', ''), 10);\n\n    if (value > min) {\n      return value;\n    }\n\n    return initial;\n  }\n\n}","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@grafikart/spinning-dots-element/index.js"],"names":["SpinningDots","HTMLElement","observedAttributes","constructor","root","attachShadow","mode","connectedCallback","styles","window","getComputedStyle","width","intFromPx","strokeWidth","circles","getAttribute","innerHTML","buildStyles","buildCircles","buildTrail","attributeChangedCallback","querySelector","disconnectedCallback","w","n","r","circleRadius","dom","i","a","Math","PI","x","sin","y","cos","stroke","offset","value","initial","min","undefined","parseInt","replace"],"mappings":"AAAA,eAAe,MAAMA,YAAN,SAA2BC,WAA3B,CAAuC;AACpD,aAAWC,kBAAX,GAAgC;AAAE,WAAO,CAAC,MAAD,CAAP;AAAiB;;AAEnDC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,IAAL,GAAY,KAAKC,YAAL,CAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlB,CAAZ;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,CAAf;AACA,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAeJ,MAAM,CAACG,KAAtB,EAA6B,EAA7B,CAAd;AACA,UAAME,WAAW,GAAG,KAAKD,SAAL,CAAeJ,MAAM,CAACK,WAAtB,EAAoC,IAAI,EAAL,GAAWF,KAA9C,EAAqD,CAArD,CAApB;AACA,UAAMG,OAAO,GAAG,KAAKF,SAAL,CAAe,KAAKG,YAAL,CAAkB,MAAlB,CAAf,EAA0C,CAA1C,CAAhB;AACA,SAAKX,IAAL,CAAUY,SAAV,GAAuB;MACrB,KAAKC,WAAL,CAAiBN,KAAjB,EAAwBG,OAAxB,EAAiCD,WAAjC,CAA8C;wCACZF,KAAM,IAAGA,KAAM;QAC/C,KAAKO,YAAL,CAAkBP,KAAlB,EAAyBG,OAAzB,EAAkCD,WAAW,GAAG,CAAhD,CAAmD;;MAErD,KAAKM,UAAL,CAAgBR,KAAhB,EAAuBE,WAAvB,CAAoC;WALtC;AAOD;;AACDO,EAAAA,wBAAwB,GAAE;AACxB,UAAMZ,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,CAAf;AACA,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAeJ,MAAM,CAACG,KAAtB,EAA6B,EAA7B,CAAd;AACA,UAAMG,OAAO,GAAG,KAAKF,SAAL,CAAe,KAAKG,YAAL,CAAkB,MAAlB,CAAf,EAA0C,CAA1C,CAAhB;AACA,UAAMF,WAAW,GAAG,KAAKD,SAAL,CAAeJ,MAAM,CAACK,WAAtB,EAAoC,IAAI,EAAL,GAAWF,KAA9C,EAAqD,CAArD,CAApB;AACA,QAAG,KAAKP,IAAL,CAAUiB,aAAV,CAAwB,UAAxB,KAAuC,IAA1C,EAAgD,KAAKjB,IAAL,CAAUiB,aAAV,CAAwB,UAAxB,EAAoCL,SAApC,GAAgD,KAAKE,YAAL,CAAkBP,KAAlB,EAAyBG,OAAzB,EAAkCD,WAAW,GAAG,CAAhD,CAAhD;AACjD;;AAEDS,EAAAA,oBAAoB,GAAG;AACrB,SAAKlB,IAAL,CAAUY,SAAV,GAAsB,EAAtB;AACD;AAED;;;;;;;;;AAOAE,EAAAA,YAAY,CAACK,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACpB,UAAMC,YAAY,GAAGH,CAAC,GAAG,CAAJ,GAAQE,CAA7B;AACA,QAAIE,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,CAAC,GAAIC,IAAI,CAACC,EAAL,IAAWP,CAAC,GAAG,CAAf,CAAD,GAAsBI,CAAhC;AACA,YAAMI,CAAC,GAAGN,YAAY,GAAGI,IAAI,CAACG,GAAL,CAASJ,CAAT,CAAf,GAA6BN,CAAC,GAAG,CAA3C;AACA,YAAMW,CAAC,GAAGR,YAAY,GAAGI,IAAI,CAACK,GAAL,CAASN,CAAT,CAAf,GAA6BN,CAAC,GAAG,CAA3C;AACAI,MAAAA,GAAG,IAAK,eAAcK,CAAE,SAAQE,CAAE,QAAOT,CAAE,yBAA3C;AACD;;AACD,WAAOE,GAAP;AACD;AAED;;;;;;;;AAMAR,EAAAA,UAAU,CAACI,CAAD,EAAIa,MAAJ,EAAY;AACpB,WAAQ,kCAAiCb,CAAE,IAAGA,CAAE;cACtCA,CAAC,GAAG,CAAE,SAAQA,CAAC,GAAG,CAAE,QAAOA,CAAC,GAAG,CAAJ,GACnCa,MAAM,GAAG,CAAE,mBAAkBA,MAAO;OAFtC;AAID;AAED;;;;;;;;;AAOAnB,EAAAA,WAAW,CAACM,CAAD,EAAIC,CAAJ,EAAOY,MAAP,EAAe;AACxB,UAAMC,MAAM,GAAGP,IAAI,CAACC,EAAL,IAAWR,CAAC,GAAGa,MAAf,CAAf;AACA,WAAQ;;;iBAGKb,CAAE;kBACDA,CAAE;;;;;;;;;;;;;;;;;;;;4BAoBQc,MAAO;6BACNA,MAAM,GAAGA,MAAM,GAAGb,CAAE;;;;;;;;;;;;kCAYfa,MAAM,GAAGA,MAAM,GAAGb,CAAE;mCACnBa,MAAM,GAAI,MAAMA,MAAP,GAAiBb,CAAE;oCAC3Ba,MAAM,GAAGA,MAAM,GAAGb,CAAE;;;;;;aAvCpD;AA8CD;AAED;;;;;;;;AAMAZ,EAAAA,SAAS,CAAC0B,KAAD,EAAQC,OAAR,EAAiBC,GAAG,GAAG,CAAvB,EAA0B;AACjC,QAAIF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKG,SAAhC,EAA2C;AACzC,aAAOF,OAAP;AACD;;AACDD,IAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAK,CAACK,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,EAA0B,EAA1B,CAAhB;;AACA,QAAIL,KAAK,GAAGE,GAAZ,EAAiB;AACf,aAAOF,KAAP;AACD;;AACD,WAAOC,OAAP;AACD;;AAzImD","sourcesContent":["export default class SpinningDots extends HTMLElement {\n  static get observedAttributes() { return ['dots'] }\n\n  constructor() {\n    super()\n    this.root = this.attachShadow({ mode: 'open' })\n  }\n\n  connectedCallback() {\n    const styles = window.getComputedStyle(this)\n    const width = this.intFromPx(styles.width, 28)\n    const strokeWidth = this.intFromPx(styles.strokeWidth, (4 / 28) * width, 1)\n    const circles = this.intFromPx(this.getAttribute('dots'), 8)\n    this.root.innerHTML = `<div>\n    ${this.buildStyles(width, circles, strokeWidth)}\n    <svg class=\"circles\" viewBox=\"0 0 ${width} ${width}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      ${this.buildCircles(width, circles, strokeWidth / 2)}\n    </svg>\n    ${this.buildTrail(width, strokeWidth)}\n    </div>`\n  }\n  attributeChangedCallback(){\n    const styles = window.getComputedStyle(this)\n    const width = this.intFromPx(styles.width, 28)\n    const circles = this.intFromPx(this.getAttribute('dots'), 8)\n    const strokeWidth = this.intFromPx(styles.strokeWidth, (4 / 28) * width, 1)\n    if(this.root.querySelector(\".circles\") != null) this.root.querySelector(\".circles\").innerHTML = this.buildCircles(width, circles, strokeWidth / 2)\n  }\n\n  disconnectedCallback() {\n    this.root.innerHTML = ''\n  }\n\n  /**\n   * Builds a SVG with n circles equally spaced around a circle\n   * @param {number} w canvas width\n   * @param {number} n circles count\n   * @param {number} r circles radius\n   * @return {string}\n   */\n  buildCircles(w, n, r) {\n    const circleRadius = w / 2 - r\n    let dom = \"\"\n    for (let i = 0; i < n; i++) {\n      const a = (Math.PI / (n / 2)) * i\n      const x = circleRadius * Math.sin(a) + w / 2\n      const y = circleRadius * Math.cos(a) + w / 2\n      dom += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${r}\" fill=\"currentColor\"/>`\n    }\n    return dom\n  }\n\n  /**\n   * Builds a SVG circle\n   * @param {number} w canvas width\n   * @param {number} stroke stroke width\n   * @return {string}\n   */\n  buildTrail(w, stroke) {\n    return `<svg class=\"halo\" viewBox=\"0 0 ${w} ${w}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"${w / 2}\" cy=\"${w / 2}\" r=\"${w / 2 -\n      stroke / 2}\" stroke-width=\"${stroke}\" stroke-linecap=\"round\" stroke=\"currentColor\"/>\n</svg>`\n  }\n\n  /**\n   * Build the style\n   * @param {number} w canvas width\n   * @param {number} n number of section for the trail\n   * @param {number} stroke size of the stroke\n   * @return {string}\n   */\n  buildStyles(w, n, stroke) {\n    const offset = Math.PI * (w - stroke)\n    return `<style>\n      :host {\n        display: inline-block;\n        width: ${w}px;\n        height: ${w}px;\n      }\n      div {\n        animation: fadeIn .4s cubic-bezier(.1,.6,.3,1);\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n      svg {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n      .circles {\n        animation: spin 16s linear infinite;\n      }\n      .halo {\n        animation: spin2 1.6s cubic-bezier(.5,.15,.5,.85)  infinite;\n      } \n      .halo circle {\n        stroke-dasharray: ${offset};\n        stroke-dashoffset: ${offset + offset / n};\n        animation: trail 1.6s cubic-bezier(.5,.15,.5,.85)   infinite;\n      }\n      @keyframes spin {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(360deg); }\n      }\n      @keyframes spin2 {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(720deg); }\n      }\n      @keyframes trail {\n        0% { stroke-dashoffset: ${offset + offset / n}; }\n        50% { stroke-dashoffset: ${offset + (2.5 * offset) / n}; }\n        100% { stroke-dashoffset: ${offset + offset / n}; }\n      }\n      @keyframes fadeIn {\n        from { opacity: 0; transform: scale(.1) }\n        to { opacity: 1; transform: scale(1) }\n      }\n    </style>`\n  }\n\n  /**\n   * Extract an int from a string\n   * @param {string} value \"20px\" \"auto\"\n   * @param {number} initial default value\n   * @param {number} min assign default value if the value is under this threshold\n   */\n  intFromPx(value, initial, min = 0) {\n    if (value === null || value === undefined) {\n      return initial\n    }\n    value = parseInt(value.replace('px', ''), 10)\n    if (value > min) {\n      return value\n    }\n    return initial\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
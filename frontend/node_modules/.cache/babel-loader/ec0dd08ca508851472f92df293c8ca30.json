{"ast":null,"code":"'use strict';\n\nmodule.exports = markdown;\nmarkdown.displayName = 'markdown';\nmarkdown.aliases = ['md'];\n\nfunction markdown(Prism) {\n  ;\n\n  (function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source;\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner;\n      });\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')');\n    }\n\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/.source;\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|$)/.source.replace(/__/g, function () {\n      return tableCell;\n    });\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/.source;\n    Prism.languages.markdown = Prism.languages.extend('markup', {});\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp('^' + tableRow + tableLine + '(?:' + tableRow + ')*', 'm'),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp('^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [{\n        // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n        pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n        lookbehind: true,\n        alias: 'keyword'\n      }, {\n        // `code`\n        // ``code``\n        pattern: /``.+?``|`[^`\\r\\n]+`/,\n        alias: 'keyword'\n      }, {\n        // ```optional language\n        // code block\n        // ```\n        pattern: /^```[\\s\\S]*?^```$/m,\n        greedy: true,\n        inside: {\n          'code-block': {\n            pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n            lookbehind: true\n          },\n          'code-language': {\n            pattern: /^(```).+/,\n            lookbehind: true\n          },\n          punctuation: /```/\n        }\n      }],\n      title: [{\n        // title 1\n        // =======\n        // title 2\n        // -------\n        pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n        alias: 'important',\n        inside: {\n          punctuation: /==+$|--+$/\n        }\n      }, {\n        // # title 1\n        // ###### title 6\n        pattern: /(^\\s*)#+.+/m,\n        lookbehind: true,\n        alias: 'important',\n        inside: {\n          punctuation: /^#+|#+$/\n        }\n      }],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(/\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(/\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(/!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    });\n    ['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;\n      ['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] = Prism.languages.markdown[inside];\n        }\n      });\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return;\n      }\n\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return;\n        }\n\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i];\n\n          if (token.type !== 'code') {\n            walkTokens(token.content);\n            continue;\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n\n\n          var codeLang = token.content[1];\n          var codeBlock = token.content[3];\n\n          if (codeLang && codeBlock && codeLang.type === 'code-language' && codeBlock.type === 'code-block' && typeof codeLang.content === 'string') {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content.replace(/\\b#/g, 'sharp').replace(/\\b\\+\\+/g, 'pp'); // only use the first word\n\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase();\n            var alias = 'language-' + lang; // add alias\n\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias];\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias];\n            } else {\n              codeBlock.alias.push(alias);\n            }\n          }\n        }\n      }\n\n      walkTokens(env.tokens);\n    });\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return;\n      }\n\n      var codeLang = '';\n\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i];\n        var match = /language-(.+)/.exec(cls);\n\n        if (match) {\n          codeLang = match[1];\n          break;\n        }\n      }\n\n      var grammar = Prism.languages[codeLang];\n\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id = 'md-' + new Date().valueOf() + '-' + Math.floor(Math.random() * 1e16);\n          env.attributes['id'] = id;\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id);\n\n            if (ele) {\n              ele.innerHTML = Prism.highlight(ele.textContent, Prism.languages[codeLang], codeLang);\n            }\n          });\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value.replace(/&lt;/g, '<').replace(/&amp;/g, '&');\n        env.content = Prism.highlight(code, grammar, codeLang);\n      }\n    });\n    Prism.languages.md = Prism.languages.markdown;\n  })(Prism);\n}","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/refractor/lang/markdown.js"],"names":["module","exports","markdown","displayName","aliases","Prism","inner","source","createInline","pattern","replace","RegExp","tableCell","tableRow","tableLine","languages","extend","insertBefore","blockquote","alias","table","inside","lookbehind","punctuation","code","greedy","title","hr","list","variable","string","bold","content","italic","strike","url","forEach","token","hooks","add","env","language","walkTokens","tokens","i","l","length","type","codeLang","codeBlock","lang","exec","toLowerCase","push","classes","cls","match","grammar","plugins","autoloader","id","Date","valueOf","Math","floor","random","attributes","loadLanguages","ele","document","getElementById","innerHTML","highlight","textContent","value","md"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = markdown\nmarkdown.displayName = 'markdown'\nmarkdown.aliases = ['md']\nfunction markdown(Prism) {\n  ;(function (Prism) {\n    // Allow only one line break\n    var inner = /(?:\\\\.|[^\\\\\\n\\r]|(?:\\n|\\r\\n?)(?!\\n|\\r\\n?))/.source\n    /**\n     * This function is intended for the creation of the bold or italic pattern.\n     *\n     * This also adds a lookbehind group to the given pattern to ensure that the pattern is not backslash-escaped.\n     *\n     * _Note:_ Keep in mind that this adds a capturing group.\n     *\n     * @param {string} pattern\n     * @returns {RegExp}\n     */\n    function createInline(pattern) {\n      pattern = pattern.replace(/<inner>/g, function () {\n        return inner\n      })\n      return RegExp(/((?:^|[^\\\\])(?:\\\\{2})*)/.source + '(?:' + pattern + ')')\n    }\n    var tableCell = /(?:\\\\.|``(?:[^`\\r\\n]|`(?!`))+``|`[^`\\r\\n]+`|[^\\\\|\\r\\n`])+/\n      .source\n    var tableRow = /\\|?__(?:\\|__)+\\|?(?:(?:\\n|\\r\\n?)|$)/.source.replace(\n      /__/g,\n      function () {\n        return tableCell\n      }\n    )\n    var tableLine = /\\|?[ \\t]*:?-{3,}:?[ \\t]*(?:\\|[ \\t]*:?-{3,}:?[ \\t]*)+\\|?(?:\\n|\\r\\n?)/\n      .source\n    Prism.languages.markdown = Prism.languages.extend('markup', {})\n    Prism.languages.insertBefore('markdown', 'prolog', {\n      blockquote: {\n        // > ...\n        pattern: /^>(?:[\\t ]*>)*/m,\n        alias: 'punctuation'\n      },\n      table: {\n        pattern: RegExp(\n          '^' + tableRow + tableLine + '(?:' + tableRow + ')*',\n          'm'\n        ),\n        inside: {\n          'table-data-rows': {\n            pattern: RegExp(\n              '^(' + tableRow + tableLine + ')(?:' + tableRow + ')*$'\n            ),\n            lookbehind: true,\n            inside: {\n              'table-data': {\n                pattern: RegExp(tableCell),\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          },\n          'table-line': {\n            pattern: RegExp('^(' + tableRow + ')' + tableLine + '$'),\n            lookbehind: true,\n            inside: {\n              punctuation: /\\||:?-{3,}:?/\n            }\n          },\n          'table-header-row': {\n            pattern: RegExp('^' + tableRow + '$'),\n            inside: {\n              'table-header': {\n                pattern: RegExp(tableCell),\n                alias: 'important',\n                inside: Prism.languages.markdown\n              },\n              punctuation: /\\|/\n            }\n          }\n        }\n      },\n      code: [\n        {\n          // Prefixed by 4 spaces or 1 tab and preceded by an empty line\n          pattern: /((?:^|\\n)[ \\t]*\\n|(?:^|\\r\\n?)[ \\t]*\\r\\n?)(?: {4}|\\t).+(?:(?:\\n|\\r\\n?)(?: {4}|\\t).+)*/,\n          lookbehind: true,\n          alias: 'keyword'\n        },\n        {\n          // `code`\n          // ``code``\n          pattern: /``.+?``|`[^`\\r\\n]+`/,\n          alias: 'keyword'\n        },\n        {\n          // ```optional language\n          // code block\n          // ```\n          pattern: /^```[\\s\\S]*?^```$/m,\n          greedy: true,\n          inside: {\n            'code-block': {\n              pattern: /^(```.*(?:\\n|\\r\\n?))[\\s\\S]+?(?=(?:\\n|\\r\\n?)^```$)/m,\n              lookbehind: true\n            },\n            'code-language': {\n              pattern: /^(```).+/,\n              lookbehind: true\n            },\n            punctuation: /```/\n          }\n        }\n      ],\n      title: [\n        {\n          // title 1\n          // =======\n          // title 2\n          // -------\n          pattern: /\\S.*(?:\\n|\\r\\n?)(?:==+|--+)(?=[ \\t]*$)/m,\n          alias: 'important',\n          inside: {\n            punctuation: /==+$|--+$/\n          }\n        },\n        {\n          // # title 1\n          // ###### title 6\n          pattern: /(^\\s*)#+.+/m,\n          lookbehind: true,\n          alias: 'important',\n          inside: {\n            punctuation: /^#+|#+$/\n          }\n        }\n      ],\n      hr: {\n        // ***\n        // ---\n        // * * *\n        // -----------\n        pattern: /(^\\s*)([*-])(?:[\\t ]*\\2){2,}(?=\\s*$)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      list: {\n        // * item\n        // + item\n        // - item\n        // 1. item\n        pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n        lookbehind: true,\n        alias: 'punctuation'\n      },\n      'url-reference': {\n        // [id]: http://example.com \"Optional title\"\n        // [id]: http://example.com 'Optional title'\n        // [id]: http://example.com (Optional title)\n        // [id]: <http://example.com> \"Optional title\"\n        pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n        inside: {\n          variable: {\n            pattern: /^(!?\\[)[^\\]]+/,\n            lookbehind: true\n          },\n          string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n          punctuation: /^[\\[\\]!:]|[<>]/\n        },\n        alias: 'url'\n      },\n      bold: {\n        // **strong**\n        // __strong__\n        // allow one nested instance of italic text using the same delimiter\n        pattern: createInline(\n          /\\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\\b|\\*\\*(?:(?!\\*)<inner>|\\*(?:(?!\\*)<inner>)+\\*)+\\*\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^..)[\\s\\S]+(?=..$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /\\*\\*|__/\n        }\n      },\n      italic: {\n        // *em*\n        // _em_\n        // allow one nested instance of bold text using the same delimiter\n        pattern: createInline(\n          /\\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\\b|\\*(?:(?!\\*)<inner>|\\*\\*(?:(?!\\*)<inner>)+\\*\\*)+\\*/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^.)[\\s\\S]+(?=.$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /[*_]/\n        }\n      },\n      strike: {\n        // ~~strike through~~\n        // ~strike~\n        pattern: createInline(/(~~?)(?:(?!~)<inner>)+?\\2/.source),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          content: {\n            pattern: /(^~~?)[\\s\\S]+(?=\\1$)/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          punctuation: /~~?/\n        }\n      },\n      url: {\n        // [example](http://example.com \"Optional title\")\n        // [example][id]\n        // [example] [id]\n        pattern: createInline(\n          /!?\\[(?:(?!\\])<inner>)+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[(?:(?!\\])<inner>)+\\])/\n            .source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          variable: {\n            pattern: /(\\[)[^\\]]+(?=\\]$)/,\n            lookbehind: true\n          },\n          content: {\n            pattern: /(^!?\\[)[^\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: {} // see below\n          },\n          string: {\n            pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n          }\n        }\n      }\n    })\n    ;['url', 'bold', 'italic', 'strike'].forEach(function (token) {\n      ;['url', 'bold', 'italic', 'strike'].forEach(function (inside) {\n        if (token !== inside) {\n          Prism.languages.markdown[token].inside.content.inside[inside] =\n            Prism.languages.markdown[inside]\n        }\n      })\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      if (env.language !== 'markdown' && env.language !== 'md') {\n        return\n      }\n      function walkTokens(tokens) {\n        if (!tokens || typeof tokens === 'string') {\n          return\n        }\n        for (var i = 0, l = tokens.length; i < l; i++) {\n          var token = tokens[i]\n          if (token.type !== 'code') {\n            walkTokens(token.content)\n            continue\n          }\n          /*\n           * Add the correct `language-xxxx` class to this code block. Keep in mind that the `code-language` token\n           * is optional. But the grammar is defined so that there is only one case we have to handle:\n           *\n           * token.content = [\n           *     <span class=\"punctuation\">```</span>,\n           *     <span class=\"code-language\">xxxx</span>,\n           *     '\\n', // exactly one new lines (\\r or \\n or \\r\\n)\n           *     <span class=\"code-block\">...</span>,\n           *     '\\n', // exactly one new lines again\n           *     <span class=\"punctuation\">```</span>\n           * ];\n           */\n          var codeLang = token.content[1]\n          var codeBlock = token.content[3]\n          if (\n            codeLang &&\n            codeBlock &&\n            codeLang.type === 'code-language' &&\n            codeBlock.type === 'code-block' &&\n            typeof codeLang.content === 'string'\n          ) {\n            // this might be a language that Prism does not support\n            // do some replacements to support C++, C#, and F#\n            var lang = codeLang.content\n              .replace(/\\b#/g, 'sharp')\n              .replace(/\\b\\+\\+/g, 'pp') // only use the first word\n            lang = (/[a-z][\\w-]*/i.exec(lang) || [''])[0].toLowerCase()\n            var alias = 'language-' + lang // add alias\n            if (!codeBlock.alias) {\n              codeBlock.alias = [alias]\n            } else if (typeof codeBlock.alias === 'string') {\n              codeBlock.alias = [codeBlock.alias, alias]\n            } else {\n              codeBlock.alias.push(alias)\n            }\n          }\n        }\n      }\n      walkTokens(env.tokens)\n    })\n    Prism.hooks.add('wrap', function (env) {\n      if (env.type !== 'code-block') {\n        return\n      }\n      var codeLang = ''\n      for (var i = 0, l = env.classes.length; i < l; i++) {\n        var cls = env.classes[i]\n        var match = /language-(.+)/.exec(cls)\n        if (match) {\n          codeLang = match[1]\n          break\n        }\n      }\n      var grammar = Prism.languages[codeLang]\n      if (!grammar) {\n        if (codeLang && codeLang !== 'none' && Prism.plugins.autoloader) {\n          var id =\n            'md-' +\n            new Date().valueOf() +\n            '-' +\n            Math.floor(Math.random() * 1e16)\n          env.attributes['id'] = id\n          Prism.plugins.autoloader.loadLanguages(codeLang, function () {\n            var ele = document.getElementById(id)\n            if (ele) {\n              ele.innerHTML = Prism.highlight(\n                ele.textContent,\n                Prism.languages[codeLang],\n                codeLang\n              )\n            }\n          })\n        }\n      } else {\n        // reverse Prism.util.encode\n        var code = env.content.value\n          .replace(/&lt;/g, '<')\n          .replace(/&amp;/g, '&')\n        env.content = Prism.highlight(code, grammar, codeLang)\n      }\n    })\n    Prism.languages.md = Prism.languages.markdown\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nconst KEYWORDS = [\"as\", // for exports\n\"in\", \"of\", \"if\", \"for\", \"while\", \"finally\", \"var\", \"new\", \"function\", \"do\", \"return\", \"void\", \"else\", \"break\", \"catch\", \"instanceof\", \"with\", \"throw\", \"case\", \"default\", \"try\", \"switch\", \"continue\", \"typeof\", \"delete\", \"let\", \"yield\", \"const\", \"class\", // JS handles these with a special rule\n// \"get\",\n// \"set\",\n\"debugger\", \"async\", \"await\", \"static\", \"import\", \"from\", \"export\", \"extends\"];\nconst LITERALS = [\"true\", \"false\", \"null\", \"undefined\", \"NaN\", \"Infinity\"];\nconst TYPES = [\"Intl\", \"DataView\", \"Number\", \"Math\", \"Date\", \"String\", \"RegExp\", \"Object\", \"Function\", \"Boolean\", \"Error\", \"Symbol\", \"Set\", \"Map\", \"WeakSet\", \"WeakMap\", \"Proxy\", \"Reflect\", \"JSON\", \"Promise\", \"Float64Array\", \"Int16Array\", \"Int32Array\", \"Int8Array\", \"Uint16Array\", \"Uint32Array\", \"Float32Array\", \"Array\", \"Uint8Array\", \"Uint8ClampedArray\", \"ArrayBuffer\"];\nconst ERROR_TYPES = [\"EvalError\", \"InternalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\"];\nconst BUILT_IN_GLOBALS = [\"setInterval\", \"setTimeout\", \"clearInterval\", \"clearTimeout\", \"require\", \"exports\", \"eval\", \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"escape\", \"unescape\"];\nconst BUILT_IN_VARIABLES = [\"arguments\", \"this\", \"super\", \"console\", \"window\", \"document\", \"localStorage\", \"module\", \"global\" // Node.js\n];\nconst BUILT_INS = [].concat(BUILT_IN_GLOBALS, BUILT_IN_VARIABLES, TYPES, ERROR_TYPES);\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat(...args) {\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n\nfunction javascript(hljs) {\n  var IDENT_RE$1 = IDENT_RE;\n  var FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  var XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/\n  };\n  var KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS.join(\" \"),\n    literal: LITERALS.join(\" \"),\n    built_in: BUILT_INS.join(\" \")\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0[bB][01]+)n?'\n    }, {\n      begin: '\\\\b(0[oO][0-7]+)n?'\n    }, {\n      begin: hljs.C_NUMBER_RE + 'n?'\n    }],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n\n  };\n  var HTML_TEMPLATE = {\n    begin: 'html`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      subLanguage: 'xml'\n    }\n  };\n  var CSS_TEMPLATE = {\n    begin: 'css`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [hljs.BACKSLASH_ESCAPE, SUBST],\n      subLanguage: 'css'\n    }\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [hljs.BACKSLASH_ESCAPE, SUBST]\n  };\n  SUBST.contains = [hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, HTML_TEMPLATE, CSS_TEMPLATE, TEMPLATE_STRING, NUMBER, hljs.REGEXP_MODE];\n  var PARAMS_CONTAINS = SUBST.contains.concat([// eat recursive parens in sub expressions\n  {\n    begin: /\\(/,\n    end: /\\)/,\n    contains: [\"self\"].concat(SUBST.contains, [hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE])\n  }, hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE]);\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/,\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    contains: PARAMS_CONTAINS\n  };\n  return {\n    name: 'JavaScript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    contains: [hljs.SHEBANG({\n      binary: \"node\",\n      relevance: 5\n    }), {\n      className: 'meta',\n      relevance: 10,\n      begin: /^\\s*['\"]use (strict|asm)['\"]/\n    }, hljs.APOS_STRING_MODE, hljs.QUOTE_STRING_MODE, HTML_TEMPLATE, CSS_TEMPLATE, TEMPLATE_STRING, hljs.C_LINE_COMMENT_MODE, hljs.COMMENT('/\\\\*\\\\*', '\\\\*/', {\n      relevance: 0,\n      contains: [{\n        className: 'doctag',\n        begin: '@[A-Za-z]+',\n        contains: [{\n          className: 'type',\n          begin: '\\\\{',\n          end: '\\\\}',\n          relevance: 0\n        }, {\n          className: 'variable',\n          begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n          endsParent: true,\n          relevance: 0\n        }, // eat spaces (not newlines) so we can find\n        // types or variables\n        {\n          begin: /(?=[^\\n])\\s/,\n          relevance: 0\n        }]\n      }]\n    }), hljs.C_BLOCK_COMMENT_MODE, NUMBER, {\n      // object attr container\n      begin: concat(/[{,\\n]\\s*/, // we need to look ahead to make sure that we actually have an\n      // attribute coming up so we don't steal a comma from a potential\n      // \"value\" container\n      //\n      // NOTE: this might not work how you think.  We don't actually always\n      // enter this mode and stay.  Instead it might merely match `,\n      // <comments up next>` and then immediately end after the , because it\n      // fails to find any actual attrs. But this still does the job because\n      // it prevents the value contain rule from grabbing this instead and\n      // prevening this rule from firing when we actually DO have keys.\n      lookahead(concat( // we also need to allow for multiple possible comments inbetween\n      // the first key:value pairing\n      /(((\\/\\/.*$)|(\\/\\*(.|\\n)*\\*\\/))\\s*)*/, IDENT_RE$1 + '\\\\s*:'))),\n      relevance: 0,\n      contains: [{\n        className: 'attr',\n        begin: IDENT_RE$1 + lookahead('\\\\s*:'),\n        relevance: 0\n      }]\n    }, {\n      // \"value\" container\n      begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n      keywords: 'return throw case',\n      contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, hljs.REGEXP_MODE, {\n        className: 'function',\n        // we have to count the parens to make sure we actually have the\n        // correct bounding ( ) before the =>.  There could be any number of\n        // sub-expressions inside also surrounded by parens.\n        begin: '(\\\\([^(]*' + '(\\\\([^(]*' + '(\\\\([^(]*' + '\\\\))?' + '\\\\))?' + '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>',\n        returnBegin: true,\n        end: '\\\\s*=>',\n        contains: [{\n          className: 'params',\n          variants: [{\n            begin: hljs.UNDERSCORE_IDENT_RE\n          }, {\n            className: null,\n            begin: /\\(\\s*\\)/,\n            skip: true\n          }, {\n            begin: /\\(/,\n            end: /\\)/,\n            excludeBegin: true,\n            excludeEnd: true,\n            keywords: KEYWORDS$1,\n            contains: PARAMS_CONTAINS\n          }]\n        }]\n      }, {\n        // could be a comma delimited list of params to a function call\n        begin: /,/,\n        relevance: 0\n      }, {\n        className: '',\n        begin: /\\s/,\n        end: /\\s*/,\n        skip: true\n      }, {\n        // JSX\n        variants: [{\n          begin: FRAGMENT.begin,\n          end: FRAGMENT.end\n        }, {\n          begin: XML_TAG.begin,\n          end: XML_TAG.end\n        }],\n        subLanguage: 'xml',\n        contains: [{\n          begin: XML_TAG.begin,\n          end: XML_TAG.end,\n          skip: true,\n          contains: ['self']\n        }]\n      }],\n      relevance: 0\n    }, {\n      className: 'function',\n      beginKeywords: 'function',\n      end: /\\{/,\n      excludeEnd: true,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), PARAMS],\n      illegal: /\\[|%/\n    }, {\n      begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n\n    }, hljs.METHOD_GUARD, {\n      // ES6 class\n      className: 'class',\n      beginKeywords: 'class',\n      end: /[{;=]/,\n      excludeEnd: true,\n      illegal: /[:\"\\[\\]]/,\n      contains: [{\n        beginKeywords: 'extends'\n      }, hljs.UNDERSCORE_TITLE_MODE]\n    }, {\n      beginKeywords: 'constructor',\n      end: /\\{/,\n      excludeEnd: true\n    }, {\n      begin: '(get|set)\\\\s+(?=' + IDENT_RE$1 + '\\\\()',\n      end: /{/,\n      keywords: \"get set\",\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: IDENT_RE$1\n      }), {\n        begin: /\\(\\)/\n      }, // eat to avoid empty params\n      PARAMS]\n    }],\n    illegal: /#(?!!)/\n  };\n}\n\nmodule.exports = javascript;","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/highlight.js/lib/languages/javascript.js"],"names":["IDENT_RE","KEYWORDS","LITERALS","TYPES","ERROR_TYPES","BUILT_IN_GLOBALS","BUILT_IN_VARIABLES","BUILT_INS","concat","source","re","lookahead","args","joined","map","x","join","javascript","hljs","IDENT_RE$1","FRAGMENT","begin","end","XML_TAG","KEYWORDS$1","$pattern","keyword","literal","built_in","NUMBER","className","variants","C_NUMBER_RE","relevance","SUBST","keywords","contains","HTML_TEMPLATE","starts","returnEnd","BACKSLASH_ESCAPE","subLanguage","CSS_TEMPLATE","TEMPLATE_STRING","APOS_STRING_MODE","QUOTE_STRING_MODE","REGEXP_MODE","PARAMS_CONTAINS","C_BLOCK_COMMENT_MODE","C_LINE_COMMENT_MODE","PARAMS","excludeBegin","excludeEnd","name","aliases","SHEBANG","binary","COMMENT","endsParent","RE_STARTERS_RE","UNDERSCORE_IDENT_RE","returnBegin","skip","beginKeywords","inherit","TITLE_MODE","illegal","METHOD_GUARD","UNDERSCORE_TITLE_MODE","module","exports"],"mappings":"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","sourcesContent":["const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nconst KEYWORDS = [\n  \"as\", // for exports\n  \"in\",\n  \"of\",\n  \"if\",\n  \"for\",\n  \"while\",\n  \"finally\",\n  \"var\",\n  \"new\",\n  \"function\",\n  \"do\",\n  \"return\",\n  \"void\",\n  \"else\",\n  \"break\",\n  \"catch\",\n  \"instanceof\",\n  \"with\",\n  \"throw\",\n  \"case\",\n  \"default\",\n  \"try\",\n  \"switch\",\n  \"continue\",\n  \"typeof\",\n  \"delete\",\n  \"let\",\n  \"yield\",\n  \"const\",\n  \"class\",\n  // JS handles these with a special rule\n  // \"get\",\n  // \"set\",\n  \"debugger\",\n  \"async\",\n  \"await\",\n  \"static\",\n  \"import\",\n  \"from\",\n  \"export\",\n  \"extends\"\n];\nconst LITERALS = [\n  \"true\",\n  \"false\",\n  \"null\",\n  \"undefined\",\n  \"NaN\",\n  \"Infinity\"\n];\n\nconst TYPES = [\n  \"Intl\",\n  \"DataView\",\n  \"Number\",\n  \"Math\",\n  \"Date\",\n  \"String\",\n  \"RegExp\",\n  \"Object\",\n  \"Function\",\n  \"Boolean\",\n  \"Error\",\n  \"Symbol\",\n  \"Set\",\n  \"Map\",\n  \"WeakSet\",\n  \"WeakMap\",\n  \"Proxy\",\n  \"Reflect\",\n  \"JSON\",\n  \"Promise\",\n  \"Float64Array\",\n  \"Int16Array\",\n  \"Int32Array\",\n  \"Int8Array\",\n  \"Uint16Array\",\n  \"Uint32Array\",\n  \"Float32Array\",\n  \"Array\",\n  \"Uint8Array\",\n  \"Uint8ClampedArray\",\n  \"ArrayBuffer\"\n];\n\nconst ERROR_TYPES = [\n  \"EvalError\",\n  \"InternalError\",\n  \"RangeError\",\n  \"ReferenceError\",\n  \"SyntaxError\",\n  \"TypeError\",\n  \"URIError\"\n];\n\nconst BUILT_IN_GLOBALS = [\n  \"setInterval\",\n  \"setTimeout\",\n  \"clearInterval\",\n  \"clearTimeout\",\n\n  \"require\",\n  \"exports\",\n\n  \"eval\",\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  \"escape\",\n  \"unescape\"\n];\n\nconst BUILT_IN_VARIABLES = [\n  \"arguments\",\n  \"this\",\n  \"super\",\n  \"console\",\n  \"window\",\n  \"document\",\n  \"localStorage\",\n  \"module\",\n  \"global\" // Node.js\n];\n\nconst BUILT_INS = [].concat(\n  BUILT_IN_GLOBALS,\n  BUILT_IN_VARIABLES,\n  TYPES,\n  ERROR_TYPES\n);\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\nfunction javascript(hljs) {\n  var IDENT_RE$1 = IDENT_RE;\n  var FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  var XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/\n  };\n  var KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS.join(\" \"),\n    literal: LITERALS.join(\" \"),\n    built_in: BUILT_INS.join(\" \")\n  };\n  var NUMBER = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0[bB][01]+)n?' },\n      { begin: '\\\\b(0[oO][0-7]+)n?' },\n      { begin: hljs.C_NUMBER_RE + 'n?' }\n    ],\n    relevance: 0\n  };\n  var SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{', end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: []  // defined later\n  };\n  var HTML_TEMPLATE = {\n    begin: 'html`', end: '',\n    starts: {\n      end: '`', returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'xml',\n    }\n  };\n  var CSS_TEMPLATE = {\n    begin: 'css`', end: '',\n    starts: {\n      end: '`', returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'css',\n    }\n  };\n  var TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`', end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  SUBST.contains = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    HTML_TEMPLATE,\n    CSS_TEMPLATE,\n    TEMPLATE_STRING,\n    NUMBER,\n    hljs.REGEXP_MODE\n  ];\n  var PARAMS_CONTAINS = SUBST.contains.concat([\n    // eat recursive parens in sub expressions\n    { begin: /\\(/, end: /\\)/,\n      contains: [\"self\"].concat(SUBST.contains, [hljs.C_BLOCK_COMMENT_MODE, hljs.C_LINE_COMMENT_MODE])\n    },\n    hljs.C_BLOCK_COMMENT_MODE,\n    hljs.C_LINE_COMMENT_MODE\n  ]);\n  var PARAMS = {\n    className: 'params',\n    begin: /\\(/, end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    contains: PARAMS_CONTAINS\n  };\n\n  return {\n    name: 'JavaScript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    contains: [\n      hljs.SHEBANG({\n        binary: \"node\",\n        relevance: 5\n      }),\n      {\n        className: 'meta',\n        relevance: 10,\n        begin: /^\\s*['\"]use (strict|asm)['\"]/\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      HTML_TEMPLATE,\n      CSS_TEMPLATE,\n      TEMPLATE_STRING,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT(\n        '/\\\\*\\\\*',\n        '\\\\*/',\n        {\n          relevance : 0,\n          contains : [\n            {\n              className : 'doctag',\n              begin : '@[A-Za-z]+',\n              contains : [\n                {\n                  className: 'type',\n                  begin: '\\\\{',\n                  end: '\\\\}',\n                  relevance: 0\n                },\n                {\n                  className: 'variable',\n                  begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n                  endsParent: true,\n                  relevance: 0\n                },\n                // eat spaces (not newlines) so we can find\n                // types or variables\n                {\n                  begin: /(?=[^\\n])\\s/,\n                  relevance: 0\n                },\n              ]\n            }\n          ]\n        }\n      ),\n      hljs.C_BLOCK_COMMENT_MODE,\n      NUMBER,\n      { // object attr container\n        begin: concat(/[{,\\n]\\s*/,\n          // we need to look ahead to make sure that we actually have an\n          // attribute coming up so we don't steal a comma from a potential\n          // \"value\" container\n          //\n          // NOTE: this might not work how you think.  We don't actually always\n          // enter this mode and stay.  Instead it might merely match `,\n          // <comments up next>` and then immediately end after the , because it\n          // fails to find any actual attrs. But this still does the job because\n          // it prevents the value contain rule from grabbing this instead and\n          // prevening this rule from firing when we actually DO have keys.\n          lookahead(concat(\n            // we also need to allow for multiple possible comments inbetween\n            // the first key:value pairing\n            /(((\\/\\/.*$)|(\\/\\*(.|\\n)*\\*\\/))\\s*)*/,\n            IDENT_RE$1 + '\\\\s*:'))),\n        relevance: 0,\n        contains: [\n          {\n            className: 'attr',\n            begin: IDENT_RE$1 + lookahead('\\\\s*:'),\n            relevance: 0,\n          },\n        ]\n      },\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        contains: [\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            // we have to count the parens to make sure we actually have the\n            // correct bounding ( ) before the =>.  There could be any number of\n            // sub-expressions inside also surrounded by parens.\n            begin: '(\\\\([^(]*' +\n              '(\\\\([^(]*' +\n                '(\\\\([^(]*' +\n                '\\\\))?' +\n              '\\\\))?' +\n            '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>', returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: hljs.UNDERSCORE_IDENT_RE\n                  },\n                  {\n                    className: null,\n                    begin: /\\(\\s*\\)/,\n                    skip: true\n                  },\n                  {\n                    begin: /\\(/, end: /\\)/,\n                    excludeBegin: true, excludeEnd: true,\n                    keywords: KEYWORDS$1,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // could be a comma delimited list of params to a function call\n            begin: /,/, relevance: 0,\n          },\n          {\n            className: '',\n            begin: /\\s/,\n            end: /\\s*/,\n            skip: true,\n          },\n          { // JSX\n            variants: [\n              { begin: FRAGMENT.begin, end: FRAGMENT.end },\n              { begin: XML_TAG.begin, end: XML_TAG.end }\n            ],\n            subLanguage: 'xml',\n            contains: [\n              {\n                begin: XML_TAG.begin, end: XML_TAG.end, skip: true,\n                contains: ['self']\n              }\n            ]\n          },\n        ],\n        relevance: 0\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function', end: /\\{/, excludeEnd: true,\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE$1}),\n          PARAMS\n        ],\n        illegal: /\\[|%/\n      },\n      {\n        begin: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      },\n\n      hljs.METHOD_GUARD,\n      { // ES6 class\n        className: 'class',\n        beginKeywords: 'class', end: /[{;=]/, excludeEnd: true,\n        illegal: /[:\"\\[\\]]/,\n        contains: [\n          {beginKeywords: 'extends'},\n          hljs.UNDERSCORE_TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'constructor', end: /\\{/, excludeEnd: true\n      },\n      {\n        begin: '(get|set)\\\\s+(?=' + IDENT_RE$1 + '\\\\()',\n        end: /{/,\n        keywords: \"get set\",\n        contains: [\n          hljs.inherit(hljs.TITLE_MODE, {begin: IDENT_RE$1}),\n          { begin: /\\(\\)/ }, // eat to avoid empty params\n          PARAMS\n        ]\n\n      }\n    ],\n    illegal: /#(?!!)/\n  };\n}\n\nmodule.exports = javascript;\n"]},"metadata":{},"sourceType":"script"}
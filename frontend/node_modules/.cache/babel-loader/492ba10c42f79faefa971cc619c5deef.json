{"ast":null,"code":"'use strict';\n\nmodule.exports = scheme;\nscheme.displayName = 'scheme';\nscheme.aliases = [];\n\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    symbol: {\n      pattern: /'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[-a-zA-Z]+|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n    {\n      pattern: /(\\(lambda\\s+)[^()'\\s]+/,\n      lookbehind: true\n    }, {\n      pattern: /(\\(lambda\\s+\\()[^()']+/,\n      lookbehind: true\n    }],\n    keyword: {\n      pattern: /(\\()(?:define(?:-library|-macro|-syntax|-values)?|defmacro|(?:case-)?lambda|let(?:(?:\\*|rec)?(?:-values)?|-syntax|rec-syntax)|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-(?:case|rules))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    number: {\n      // This pattern (apart from the lookarounds) works like this:\n      //\n      // Decimal numbers\n      // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n      // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n      // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n      // <dec number>     := <dec prefix>[+-]?<complex>\n      //\n      // Binary, octal, and hexadecimal numbers\n      // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n      // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n      // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n      // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n      //\n      // <number>         := <dec number>|<b.o.x. number>\n      pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[\\s()])#[ft](?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  };\n}","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/refractor/lang/scheme.js"],"names":["module","exports","scheme","displayName","aliases","Prism","languages","comment","string","pattern","greedy","symbol","character","alias","lookbehind","keyword","builtin","number","boolean","operator","function","punctuation"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiBC,MAAjB;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;;AACA,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACrBA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,OAAO,EAAE,KADc;AAEvBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,mBADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFe;AAMvBC,IAAAA,MAAM,EAAE;AACNF,MAAAA,OAAO,EAAE,aADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KANe;AAUvBE,IAAAA,SAAS,EAAE;AACTH,MAAAA,OAAO,EAAE,sCADA;AAETC,MAAAA,MAAM,EAAE,IAFC;AAGTG,MAAAA,KAAK,EAAE;AAHE,KAVY;AAevB,wBAAoB,CAClB;AACA;AACEJ,MAAAA,OAAO,EAAE,wBADX;AAEEK,MAAAA,UAAU,EAAE;AAFd,KAFkB,EAMlB;AACEL,MAAAA,OAAO,EAAE,wBADX;AAEEK,MAAAA,UAAU,EAAE;AAFd,KANkB,CAfG;AA0BvBC,IAAAA,OAAO,EAAE;AACPN,MAAAA,OAAO,EAAE,+OADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KA1Bc;AA8BvBE,IAAAA,OAAO,EAAE;AACPP,MAAAA,OAAO,EAAE,2NADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KA9Bc;AAkCvBG,IAAAA,MAAM,EAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,MAAAA,OAAO,EAAE,sVAhBH;AAiBNK,MAAAA,UAAU,EAAE;AAjBN,KAlCe;AAqDvBI,IAAAA,OAAO,EAAE;AACPT,MAAAA,OAAO,EAAE,6BADF;AAEPK,MAAAA,UAAU,EAAE;AAFL,KArDc;AAyDvBK,IAAAA,QAAQ,EAAE;AACRV,MAAAA,OAAO,EAAE,yCADD;AAERK,MAAAA,UAAU,EAAE;AAFJ,KAzDa;AA6DvBM,IAAAA,QAAQ,EAAE;AACRX,MAAAA,OAAO,EAAE,2BADD;AAERK,MAAAA,UAAU,EAAE;AAFJ,KA7Da;AAiEvBO,IAAAA,WAAW,EAAE;AAjEU,GAAzB;AAmED","sourcesContent":["'use strict'\n\nmodule.exports = scheme\nscheme.displayName = 'scheme'\nscheme.aliases = []\nfunction scheme(Prism) {\n  Prism.languages.scheme = {\n    comment: /;.*/,\n    string: {\n      pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: true\n    },\n    symbol: {\n      pattern: /'[^()#'\\s]+/,\n      greedy: true\n    },\n    character: {\n      pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[-a-zA-Z]+|\\S)/,\n      greedy: true,\n      alias: 'string'\n    },\n    'lambda-parameter': [\n      // https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n      {\n        pattern: /(\\(lambda\\s+)[^()'\\s]+/,\n        lookbehind: true\n      },\n      {\n        pattern: /(\\(lambda\\s+\\()[^()']+/,\n        lookbehind: true\n      }\n    ],\n    keyword: {\n      pattern: /(\\()(?:define(?:-library|-macro|-syntax|-values)?|defmacro|(?:case-)?lambda|let(?:(?:\\*|rec)?(?:-values)?|-syntax|rec-syntax)|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-(?:case|rules))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    builtin: {\n      pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    number: {\n      // This pattern (apart from the lookarounds) works like this:\n      //\n      // Decimal numbers\n      // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n      // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n      // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n      // <dec number>     := <dec prefix>[+-]?<complex>\n      //\n      // Binary, octal, and hexadecimal numbers\n      // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n      // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n      // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n      // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n      //\n      // <number>         := <dec number>|<b.o.x. number>\n      pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    boolean: {\n      pattern: /(^|[\\s()])#[ft](?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    operator: {\n      pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    function: {\n      pattern: /(\\()[^()'\\s]+(?=[()\\s]|$)/,\n      lookbehind: true\n    },\n    punctuation: /[()']/\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _classCallCheck from \"/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _createSuper from \"/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _inherits from \"/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\n\nvar SpinningDots = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(SpinningDots, _HTMLElement);\n\n  var _super = _createSuper(SpinningDots);\n\n  _createClass(SpinningDots, null, [{\n    key: \"observedAttributes\",\n    get: function get() {\n      return ['dots'];\n    }\n  }]);\n\n  function SpinningDots() {\n    var _this;\n\n    _classCallCheck(this, SpinningDots);\n\n    _this = _super.call(this);\n    _this.root = _this.attachShadow({\n      mode: 'open'\n    });\n    return _this;\n  }\n\n  _createClass(SpinningDots, [{\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var styles = window.getComputedStyle(this);\n      var width = this.intFromPx(styles.width, 28);\n      var strokeWidth = this.intFromPx(styles.strokeWidth, 4 / 28 * width, 1);\n      var circles = this.intFromPx(this.getAttribute('dots'), 8);\n      this.root.innerHTML = \"<div>\\n    \".concat(this.buildStyles(width, circles, strokeWidth), \"\\n    <svg class=\\\"circles\\\" viewBox=\\\"0 0 \").concat(width, \" \").concat(width, \"\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      \").concat(this.buildCircles(width, circles, strokeWidth / 2), \"\\n    </svg>\\n    \").concat(this.buildTrail(width, strokeWidth), \"\\n    </div>\");\n    }\n  }, {\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback() {\n      var styles = window.getComputedStyle(this);\n      var width = this.intFromPx(styles.width, 28);\n      var circles = this.intFromPx(this.getAttribute('dots'), 8);\n      var strokeWidth = this.intFromPx(styles.strokeWidth, 4 / 28 * width, 1);\n      if (this.root.querySelector(\".circles\") != null) this.root.querySelector(\".circles\").innerHTML = this.buildCircles(width, circles, strokeWidth / 2);\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      this.root.innerHTML = '';\n    }\n    /**\n     * Builds a SVG with n circles equally spaced around a circle\n     * @param {number} w canvas width\n     * @param {number} n circles count\n     * @param {number} r circles radius\n     * @return {string}\n     */\n\n  }, {\n    key: \"buildCircles\",\n    value: function buildCircles(w, n, r) {\n      var circleRadius = w / 2 - r;\n      var dom = \"\";\n\n      for (var i = 0; i < n; i++) {\n        var a = Math.PI / (n / 2) * i;\n        var x = circleRadius * Math.sin(a) + w / 2;\n        var y = circleRadius * Math.cos(a) + w / 2;\n        dom += \"<circle cx=\\\"\".concat(x, \"\\\" cy=\\\"\").concat(y, \"\\\" r=\\\"\").concat(r, \"\\\" fill=\\\"currentColor\\\"/>\");\n      }\n\n      return dom;\n    }\n    /**\n     * Builds a SVG circle\n     * @param {number} w canvas width\n     * @param {number} stroke stroke width\n     * @return {string}\n     */\n\n  }, {\n    key: \"buildTrail\",\n    value: function buildTrail(w, stroke) {\n      return \"<svg class=\\\"halo\\\" viewBox=\\\"0 0 \".concat(w, \" \").concat(w, \"\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n<circle cx=\\\"\").concat(w / 2, \"\\\" cy=\\\"\").concat(w / 2, \"\\\" r=\\\"\").concat(w / 2 - stroke / 2, \"\\\" stroke-width=\\\"\").concat(stroke, \"\\\" stroke-linecap=\\\"round\\\" stroke=\\\"currentColor\\\"/>\\n</svg>\");\n    }\n    /**\n     * Build the style\n     * @param {number} w canvas width\n     * @param {number} n number of section for the trail\n     * @param {number} stroke size of the stroke\n     * @return {string}\n     */\n\n  }, {\n    key: \"buildStyles\",\n    value: function buildStyles(w, n, stroke) {\n      var offset = Math.PI * (w - stroke);\n      return \"<style>\\n      :host {\\n        display: inline-block;\\n        width: \".concat(w, \"px;\\n        height: \").concat(w, \"px;\\n      }\\n      div {\\n        animation: fadeIn .4s cubic-bezier(.1,.6,.3,1);\\n        position: relative;\\n        width: 100%;\\n        height: 100%;\\n      }\\n      svg {\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n      }\\n      .circles {\\n        animation: spin 16s linear infinite;\\n      }\\n      .halo {\\n        animation: spin2 1.6s cubic-bezier(.5,.15,.5,.85)  infinite;\\n      } \\n      .halo circle {\\n        stroke-dasharray: \").concat(offset, \";\\n        stroke-dashoffset: \").concat(offset + offset / n, \";\\n        animation: trail 1.6s cubic-bezier(.5,.15,.5,.85)   infinite;\\n      }\\n      @keyframes spin {\\n          from {transform: rotate(0deg); }\\n          to {transform: rotate(360deg); }\\n      }\\n      @keyframes spin2 {\\n          from {transform: rotate(0deg); }\\n          to {transform: rotate(720deg); }\\n      }\\n      @keyframes trail {\\n        0% { stroke-dashoffset: \").concat(offset + offset / n, \"; }\\n        50% { stroke-dashoffset: \").concat(offset + 2.5 * offset / n, \"; }\\n        100% { stroke-dashoffset: \").concat(offset + offset / n, \"; }\\n      }\\n      @keyframes fadeIn {\\n        from { opacity: 0; transform: scale(.1) }\\n        to { opacity: 1; transform: scale(1) }\\n      }\\n    </style>\");\n    }\n    /**\n     * Extract an int from a string\n     * @param {string} value \"20px\" \"auto\"\n     * @param {number} initial default value\n     * @param {number} min assign default value if the value is under this threshold\n     */\n\n  }, {\n    key: \"intFromPx\",\n    value: function intFromPx(value, initial) {\n      var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (value === null || value === undefined) {\n        return initial;\n      }\n\n      value = parseInt(value.replace('px', ''), 10);\n\n      if (value > min) {\n        return value;\n      }\n\n      return initial;\n    }\n  }]);\n\n  return SpinningDots;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\nexport { SpinningDots as default };","map":{"version":3,"sources":["/home/chemime/Desktop/Python/django/trainingapp/frontend/node_modules/@grafikart/spinning-dots-element/index.js"],"names":["SpinningDots","root","attachShadow","mode","styles","window","getComputedStyle","width","intFromPx","strokeWidth","circles","getAttribute","innerHTML","buildStyles","buildCircles","buildTrail","querySelector","w","n","r","circleRadius","dom","i","a","Math","PI","x","sin","y","cos","stroke","offset","value","initial","min","undefined","parseInt","replace","HTMLElement"],"mappings":";;;;;;IAAqBA,Y;;;;;;;wBACa;AAAE,aAAO,CAAC,MAAD,CAAP;AAAiB;;;AAEnD,0BAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,IAAL,GAAY,MAAKC,YAAL,CAAkB;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAlB,CAAZ;AAFY;AAGb;;;;wCAEmB;AAClB,UAAMC,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,CAAf;AACA,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAeJ,MAAM,CAACG,KAAtB,EAA6B,EAA7B,CAAd;AACA,UAAME,WAAW,GAAG,KAAKD,SAAL,CAAeJ,MAAM,CAACK,WAAtB,EAAoC,IAAI,EAAL,GAAWF,KAA9C,EAAqD,CAArD,CAApB;AACA,UAAMG,OAAO,GAAG,KAAKF,SAAL,CAAe,KAAKG,YAAL,CAAkB,MAAlB,CAAf,EAA0C,CAA1C,CAAhB;AACA,WAAKV,IAAL,CAAUW,SAAV,wBACE,KAAKC,WAAL,CAAiBN,KAAjB,EAAwBG,OAAxB,EAAiCD,WAAjC,CADF,wDAEoCF,KAFpC,cAE6CA,KAF7C,2EAGI,KAAKO,YAAL,CAAkBP,KAAlB,EAAyBG,OAAzB,EAAkCD,WAAW,GAAG,CAAhD,CAHJ,+BAKE,KAAKM,UAAL,CAAgBR,KAAhB,EAAuBE,WAAvB,CALF;AAOD;;;+CACyB;AACxB,UAAML,MAAM,GAAGC,MAAM,CAACC,gBAAP,CAAwB,IAAxB,CAAf;AACA,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAeJ,MAAM,CAACG,KAAtB,EAA6B,EAA7B,CAAd;AACA,UAAMG,OAAO,GAAG,KAAKF,SAAL,CAAe,KAAKG,YAAL,CAAkB,MAAlB,CAAf,EAA0C,CAA1C,CAAhB;AACA,UAAMF,WAAW,GAAG,KAAKD,SAAL,CAAeJ,MAAM,CAACK,WAAtB,EAAoC,IAAI,EAAL,GAAWF,KAA9C,EAAqD,CAArD,CAApB;AACA,UAAG,KAAKN,IAAL,CAAUe,aAAV,CAAwB,UAAxB,KAAuC,IAA1C,EAAgD,KAAKf,IAAL,CAAUe,aAAV,CAAwB,UAAxB,EAAoCJ,SAApC,GAAgD,KAAKE,YAAL,CAAkBP,KAAlB,EAAyBG,OAAzB,EAAkCD,WAAW,GAAG,CAAhD,CAAhD;AACjD;;;2CAEsB;AACrB,WAAKR,IAAL,CAAUW,SAAV,GAAsB,EAAtB;AACD;AAED;;;;;;;;;;iCAOaK,C,EAAGC,C,EAAGC,C,EAAG;AACpB,UAAMC,YAAY,GAAGH,CAAC,GAAG,CAAJ,GAAQE,CAA7B;AACA,UAAIE,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,CAAC,GAAIC,IAAI,CAACC,EAAL,IAAWP,CAAC,GAAG,CAAf,CAAD,GAAsBI,CAAhC;AACA,YAAMI,CAAC,GAAGN,YAAY,GAAGI,IAAI,CAACG,GAAL,CAASJ,CAAT,CAAf,GAA6BN,CAAC,GAAG,CAA3C;AACA,YAAMW,CAAC,GAAGR,YAAY,GAAGI,IAAI,CAACK,GAAL,CAASN,CAAT,CAAf,GAA6BN,CAAC,GAAG,CAA3C;AACAI,QAAAA,GAAG,2BAAmBK,CAAnB,qBAA6BE,CAA7B,oBAAsCT,CAAtC,+BAAH;AACD;;AACD,aAAOE,GAAP;AACD;AAED;;;;;;;;;+BAMWJ,C,EAAGa,M,EAAQ;AACpB,yDAAyCb,CAAzC,cAA8CA,CAA9C,kFACUA,CAAC,GAAG,CADd,qBACwBA,CAAC,GAAG,CAD5B,oBACqCA,CAAC,GAAG,CAAJ,GACnCa,MAAM,GAAG,CAFX,+BAE+BA,MAF/B;AAID;AAED;;;;;;;;;;gCAOYb,C,EAAGC,C,EAAGY,M,EAAQ;AACxB,UAAMC,MAAM,GAAGP,IAAI,CAACC,EAAL,IAAWR,CAAC,GAAGa,MAAf,CAAf;AACA,8FAGab,CAHb,kCAIcA,CAJd,keAwBwBc,MAxBxB,2CAyByBA,MAAM,GAAGA,MAAM,GAAGb,CAzB3C,+YAqC8Ba,MAAM,GAAGA,MAAM,GAAGb,CArChD,mDAsC+Ba,MAAM,GAAI,MAAMA,MAAP,GAAiBb,CAtCzD,oDAuCgCa,MAAM,GAAGA,MAAM,GAAGb,CAvClD;AA8CD;AAED;;;;;;;;;8BAMUc,K,EAAOC,O,EAAkB;AAAA,UAATC,GAAS,uEAAH,CAAG;;AACjC,UAAIF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKG,SAAhC,EAA2C;AACzC,eAAOF,OAAP;AACD;;AACDD,MAAAA,KAAK,GAAGI,QAAQ,CAACJ,KAAK,CAACK,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAD,EAA0B,EAA1B,CAAhB;;AACA,UAAIL,KAAK,GAAGE,GAAZ,EAAiB;AACf,eAAOF,KAAP;AACD;;AACD,aAAOC,OAAP;AACD;;;;iCAzIuCK,W;;SAArBtC,Y","sourcesContent":["export default class SpinningDots extends HTMLElement {\n  static get observedAttributes() { return ['dots'] }\n\n  constructor() {\n    super()\n    this.root = this.attachShadow({ mode: 'open' })\n  }\n\n  connectedCallback() {\n    const styles = window.getComputedStyle(this)\n    const width = this.intFromPx(styles.width, 28)\n    const strokeWidth = this.intFromPx(styles.strokeWidth, (4 / 28) * width, 1)\n    const circles = this.intFromPx(this.getAttribute('dots'), 8)\n    this.root.innerHTML = `<div>\n    ${this.buildStyles(width, circles, strokeWidth)}\n    <svg class=\"circles\" viewBox=\"0 0 ${width} ${width}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      ${this.buildCircles(width, circles, strokeWidth / 2)}\n    </svg>\n    ${this.buildTrail(width, strokeWidth)}\n    </div>`\n  }\n  attributeChangedCallback(){\n    const styles = window.getComputedStyle(this)\n    const width = this.intFromPx(styles.width, 28)\n    const circles = this.intFromPx(this.getAttribute('dots'), 8)\n    const strokeWidth = this.intFromPx(styles.strokeWidth, (4 / 28) * width, 1)\n    if(this.root.querySelector(\".circles\") != null) this.root.querySelector(\".circles\").innerHTML = this.buildCircles(width, circles, strokeWidth / 2)\n  }\n\n  disconnectedCallback() {\n    this.root.innerHTML = ''\n  }\n\n  /**\n   * Builds a SVG with n circles equally spaced around a circle\n   * @param {number} w canvas width\n   * @param {number} n circles count\n   * @param {number} r circles radius\n   * @return {string}\n   */\n  buildCircles(w, n, r) {\n    const circleRadius = w / 2 - r\n    let dom = \"\"\n    for (let i = 0; i < n; i++) {\n      const a = (Math.PI / (n / 2)) * i\n      const x = circleRadius * Math.sin(a) + w / 2\n      const y = circleRadius * Math.cos(a) + w / 2\n      dom += `<circle cx=\"${x}\" cy=\"${y}\" r=\"${r}\" fill=\"currentColor\"/>`\n    }\n    return dom\n  }\n\n  /**\n   * Builds a SVG circle\n   * @param {number} w canvas width\n   * @param {number} stroke stroke width\n   * @return {string}\n   */\n  buildTrail(w, stroke) {\n    return `<svg class=\"halo\" viewBox=\"0 0 ${w} ${w}\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<circle cx=\"${w / 2}\" cy=\"${w / 2}\" r=\"${w / 2 -\n      stroke / 2}\" stroke-width=\"${stroke}\" stroke-linecap=\"round\" stroke=\"currentColor\"/>\n</svg>`\n  }\n\n  /**\n   * Build the style\n   * @param {number} w canvas width\n   * @param {number} n number of section for the trail\n   * @param {number} stroke size of the stroke\n   * @return {string}\n   */\n  buildStyles(w, n, stroke) {\n    const offset = Math.PI * (w - stroke)\n    return `<style>\n      :host {\n        display: inline-block;\n        width: ${w}px;\n        height: ${w}px;\n      }\n      div {\n        animation: fadeIn .4s cubic-bezier(.1,.6,.3,1);\n        position: relative;\n        width: 100%;\n        height: 100%;\n      }\n      svg {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n      .circles {\n        animation: spin 16s linear infinite;\n      }\n      .halo {\n        animation: spin2 1.6s cubic-bezier(.5,.15,.5,.85)  infinite;\n      } \n      .halo circle {\n        stroke-dasharray: ${offset};\n        stroke-dashoffset: ${offset + offset / n};\n        animation: trail 1.6s cubic-bezier(.5,.15,.5,.85)   infinite;\n      }\n      @keyframes spin {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(360deg); }\n      }\n      @keyframes spin2 {\n          from {transform: rotate(0deg); }\n          to {transform: rotate(720deg); }\n      }\n      @keyframes trail {\n        0% { stroke-dashoffset: ${offset + offset / n}; }\n        50% { stroke-dashoffset: ${offset + (2.5 * offset) / n}; }\n        100% { stroke-dashoffset: ${offset + offset / n}; }\n      }\n      @keyframes fadeIn {\n        from { opacity: 0; transform: scale(.1) }\n        to { opacity: 1; transform: scale(1) }\n      }\n    </style>`\n  }\n\n  /**\n   * Extract an int from a string\n   * @param {string} value \"20px\" \"auto\"\n   * @param {number} initial default value\n   * @param {number} min assign default value if the value is under this threshold\n   */\n  intFromPx(value, initial, min = 0) {\n    if (value === null || value === undefined) {\n      return initial\n    }\n    value = parseInt(value.replace('px', ''), 10)\n    if (value > min) {\n      return value\n    }\n    return initial\n  }\n}\n"]},"metadata":{},"sourceType":"module"}